{"pageProps":{"post":{"attributes":{},"html":"<h1><strong>Java Exception Handling</strong></h1>\n<h2><em>Learning Objectives</em></h2>\n<ul>\n<li>Understand what exceptions are and why they&#39;re important</li>\n<li>Distinguish between checked and unchecked exceptions</li>\n<li>Use try-catch-finally blocks effectively</li>\n<li>Create custom exceptions</li>\n<li>Apply best practices for exception handling</li>\n</ul>\n<hr>\n<h2>What is an Exception?</h2>\n<p>An <strong>exception</strong> is an object that contains information about an error that occurred during program execution. When an error occurs, Java creates an exception object and &quot;throws&quot; it, disrupting the normal flow of the program.</p>\n<h3>Why Do We Need Exception Handling?</h3>\n<ul>\n<li><strong>Graceful Error Recovery</strong>: Handle errors without crashing the application</li>\n<li><strong>User Experience</strong>: Provide meaningful error messages to users</li>\n<li><strong>Debugging</strong>: Get detailed information about what went wrong</li>\n<li><strong>Resource Management</strong>: Ensure resources are properly cleaned up</li>\n</ul>\n<hr>\n<h2>The Exception Hierarchy</h2>\n<p>Java organizes exceptions in a hierarchy:</p>\n<pre><code>Throwable\n├── Exception (Recoverable errors)\n│   ├── IOException (Checked)\n│   ├── SQLException (Checked)\n│   └── RuntimeException (Unchecked)\n│       ├── NullPointerException\n│       ├── IndexOutOfBoundsException\n│       └── IllegalArgumentException\n└── Error (Serious system errors)\n    ├── OutOfMemoryError\n    └── StackOverflowError\n</code></pre><h3>Types of Exceptions</h3>\n<h4>1. Checked Exceptions</h4>\n<ul>\n<li><strong>Must</strong> be handled or declared to be thrown</li>\n<li>Compiler enforces handling</li>\n<li>Examples: <code>IOException</code>, <code>SQLException</code>, <code>FileNotFoundException</code></li>\n<li>Represent recoverable conditions</li>\n</ul>\n<h4>2. Unchecked Exceptions (Runtime Exceptions)</h4>\n<ul>\n<li><strong>Optional</strong> to handle</li>\n<li>Occur at runtime due to programming errors</li>\n<li>Examples: <code>NullPointerException</code>, <code>IndexOutOfBoundsException</code></li>\n<li>Usually indicate bugs in code</li>\n</ul>\n<h4>3. Errors</h4>\n<ul>\n<li>Serious problems outside application control</li>\n<li>Examples: <code>OutOfMemoryError</code>, <code>StackOverflowError</code></li>\n<li>Generally should not be caught</li>\n</ul>\n<hr>\n<h2>Basic Exception Handling: Try-Catch</h2>\n<h3>Simple Try-Catch Block</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// Code that might throw an exception</span>\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> riskyOperation();\n} <span class=\"hljs-keyword\">catch</span> (SpecificException e) {\n    <span class=\"hljs-comment\">// Handle the specific exception</span>\n    System.out.println(<span class=\"hljs-string\">&quot;Error occurred: &quot;</span> + e.getMessage());\n}\n</code></pre><h3>Multiple Catch Blocks</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">try</span> {\n    processFile(<span class=\"hljs-string\">&quot;data.txt&quot;</span>);\n} <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) {\n    System.out.println(<span class=\"hljs-string\">&quot;File not found: &quot;</span> + e.getMessage());\n} <span class=\"hljs-keyword\">catch</span> (IOException e) {\n    System.out.println(<span class=\"hljs-string\">&quot;IO error: &quot;</span> + e.getMessage());\n} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n    System.out.println(<span class=\"hljs-string\">&quot;Unexpected error: &quot;</span> + e.getMessage());\n}\n</code></pre><h3>Multi-Catch (Java 7+)</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">try</span> {\n    performOperation();\n} <span class=\"hljs-keyword\">catch</span> (IOException | SQLException e) {\n    System.out.println(<span class=\"hljs-string\">&quot;Database or file error: &quot;</span> + e.getMessage());\n}\n</code></pre><hr>\n<h2>The Finally Block</h2>\n<p>The <code>finally</code> block <strong>always</strong> executes, regardless of whether an exception occurs:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-type\">FileReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n    reader = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>(<span class=\"hljs-string\">&quot;important.txt&quot;</span>);\n    <span class=\"hljs-comment\">// Process file</span>\n} <span class=\"hljs-keyword\">catch</span> (IOException e) {\n    System.out.println(<span class=\"hljs-string\">&quot;File error: &quot;</span> + e.getMessage());\n} <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-comment\">// Cleanup code - ALWAYS runs</span>\n    <span class=\"hljs-keyword\">if</span> (reader != <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">try</span> {\n            reader.close();\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Error closing file&quot;</span>);\n        }\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;Cleanup completed&quot;</span>);\n}\n</code></pre><hr>\n<h2>Try-With-Resources (Automatic Resource Management)</h2>\n<p>Java 7 introduced try-with-resources for automatic cleanup:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Old way (manual resource management)</span>\n<span class=\"hljs-type\">FileReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n    reader = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>(<span class=\"hljs-string\">&quot;data.txt&quot;</span>);\n    <span class=\"hljs-comment\">// Use reader</span>\n} <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">if</span> (reader != <span class=\"hljs-literal\">null</span>) {\n        reader.close();\n    }\n}\n\n<span class=\"hljs-comment\">// New way (automatic resource management)</span>\n<span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>(<span class=\"hljs-string\">&quot;data.txt&quot;</span>)) {\n    <span class=\"hljs-comment\">// Use reader - automatically closed</span>\n    <span class=\"hljs-type\">int</span> character;\n    <span class=\"hljs-keyword\">while</span> ((character = reader.read()) != -<span class=\"hljs-number\">1</span>) {\n        System.out.print((<span class=\"hljs-type\">char</span>) character);\n    }\n}\n</code></pre><h3>Multiple Resources</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileReader</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>(<span class=\"hljs-string\">&quot;input.txt&quot;</span>);\n     <span class=\"hljs-type\">FileWriter</span> <span class=\"hljs-variable\">output</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileWriter</span>(<span class=\"hljs-string\">&quot;output.txt&quot;</span>)) {\n    <span class=\"hljs-comment\">// Both resources automatically closed</span>\n    <span class=\"hljs-comment\">// Process files</span>\n}\n</code></pre><hr>\n<h2>Throwing Exceptions</h2>\n<h3>Using the <code>throw</code> Keyword</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">validateAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> {\n    <span class=\"hljs-keyword\">if</span> (age &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Age cannot be negative&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (age &gt; <span class=\"hljs-number\">150</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Age seems unrealistic&quot;</span>);\n    }\n}\n</code></pre><h3>Using the <code>throws</code> Keyword (Method Declaration)</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">readConfiguration</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException {\n    <span class=\"hljs-comment\">// Method that might throw IOException</span>\n    Files.readAllLines(Paths.get(<span class=\"hljs-string\">&quot;config.properties&quot;</span>));\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processData</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">try</span> {\n        readConfiguration();\n    } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n        System.out.println(<span class=\"hljs-string\">&quot;Configuration error: &quot;</span> + e.getMessage());\n    }\n}\n</code></pre><hr>\n<h2>Creating Custom Exceptions</h2>\n<h3>Checked Custom Exception</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InsufficientFundsException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Exception</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> withdrawAmount;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">InsufficientFundsException</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-built_in\">super</span>(<span class=\"hljs-string\">&quot;Insufficient funds in account&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">InsufficientFundsException</span><span class=\"hljs-params\">(String message)</span> {\n        <span class=\"hljs-built_in\">super</span>(message);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">InsufficientFundsException</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> balance, <span class=\"hljs-type\">double</span> withdrawAmount)</span> {\n        <span class=\"hljs-built_in\">super</span>(String.format(<span class=\"hljs-string\">&quot;Insufficient funds. Balance: %.2f, Attempted withdrawal: %.2f&quot;</span>,\n              balance, withdrawAmount));\n        <span class=\"hljs-built_in\">this</span>.balance = balance;\n        <span class=\"hljs-built_in\">this</span>.withdrawAmount = withdrawAmount;\n    }\n\n    <span class=\"hljs-comment\">// Getters</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getBalance</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-keyword\">return</span> balance; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getWithdrawAmount</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-keyword\">return</span> withdrawAmount; }\n}\n</code></pre><h3>Unchecked Custom Exception</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InvalidEmailException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">InvalidEmailException</span><span class=\"hljs-params\">(String email)</span> {\n        <span class=\"hljs-built_in\">super</span>(<span class=\"hljs-string\">&quot;Invalid email format: &quot;</span> + email);\n    }\n}\n</code></pre><h3>Using Custom Exceptions</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">withdraw</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span> <span class=\"hljs-keyword\">throws</span> InsufficientFundsException {\n        <span class=\"hljs-keyword\">if</span> (amount &gt; balance) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InsufficientFundsException</span>(balance, amount);\n        }\n        balance -= amount;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setEmail</span><span class=\"hljs-params\">(String email)</span> {\n        <span class=\"hljs-keyword\">if</span> (!email.contains(<span class=\"hljs-string\">&quot;@&quot;</span>)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InvalidEmailException</span>(email);\n        }\n        <span class=\"hljs-comment\">// Set email</span>\n    }\n}\n</code></pre><hr>\n<h2>Exception Chaining</h2>\n<p>Sometimes you want to catch one exception and throw another while preserving the original cause:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataProcessor</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processUserData</span><span class=\"hljs-params\">(String filename)</span> <span class=\"hljs-keyword\">throws</span> DataProcessingException {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// Attempt to read file</span>\n            List&lt;String&gt; lines = Files.readAllLines(Paths.get(filename));\n            <span class=\"hljs-comment\">// Process data...</span>\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-comment\">// Wrap the IOException in our custom exception</span>\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataProcessingException</span>(<span class=\"hljs-string\">&quot;Failed to process user data from &quot;</span> + filename, e);\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataProcessingException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Exception</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DataProcessingException</span><span class=\"hljs-params\">(String message, Throwable cause)</span> {\n        <span class=\"hljs-built_in\">super</span>(message, cause);\n    }\n}\n</code></pre><hr>\n<h2>Best Practices for Exception Handling</h2>\n<h3><strong>DO&#39;s</strong></h3>\n<ol>\n<li><strong>Be Specific</strong>: Catch specific exceptions rather than generic <code>Exception</code></li>\n<li><strong>Fail Fast</strong>: Validate inputs early and throw exceptions immediately</li>\n<li><strong>Provide Context</strong>: Include meaningful error messages</li>\n<li><strong>Log Appropriately</strong>: Log exceptions at the right level</li>\n<li><strong>Clean Up Resources</strong>: Use try-with-resources or finally blocks</li>\n</ol>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Good: Specific exception handling</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">parseInteger</span><span class=\"hljs-params\">(String input)</span> {\n    <span class=\"hljs-keyword\">if</span> (input == <span class=\"hljs-literal\">null</span> || input.trim().isEmpty()) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Input cannot be null or empty&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(input.trim());\n        <span class=\"hljs-comment\">// Process result</span>\n    } <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid number format: &quot;</span> + input, e);\n    }\n}\n</code></pre><h3>DON&#39;Ts</h3>\n<ol>\n<li><strong>Don&#39;t Swallow Exceptions</strong>: Empty catch blocks hide problems</li>\n<li><strong>Don&#39;t Catch Exception/Throwable</strong>: Too broad, might hide serious errors</li>\n<li><strong>Don&#39;t Use Exceptions for Control Flow</strong>: Exceptions should be exceptional</li>\n<li><strong>Don&#39;t Log and Rethrow</strong>: Causes duplicate log entries</li>\n</ol>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Bad: Swallowing exceptions</span>\n<span class=\"hljs-keyword\">try</span> {\n    riskyOperation();\n} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n    <span class=\"hljs-comment\">// This hides the problem!</span>\n}\n\n<span class=\"hljs-comment\">// Good: At minimum, log the exception</span>\n<span class=\"hljs-keyword\">try</span> {\n    riskyOperation();\n} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n    logger.error(<span class=\"hljs-string\">&quot;Failed to perform risky operation&quot;</span>, e);\n    <span class=\"hljs-comment\">// Decide whether to rethrow, return default, etc.</span>\n}\n</code></pre><hr>\n<h2>Practical Examples</h2>\n<h3>Example 1: File Processing with Proper Error Handling</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileProcessor</span> {\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">readFileContent</span><span class=\"hljs-params\">(String filename)</span> <span class=\"hljs-keyword\">throws</span> FileProcessingException {\n        <span class=\"hljs-keyword\">if</span> (filename == <span class=\"hljs-literal\">null</span> || filename.trim().isEmpty()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Filename cannot be null or empty&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> Files.newBufferedReader(Paths.get(filename))) {\n            <span class=\"hljs-keyword\">return</span> reader.lines()\n                        .collect(Collectors.joining(<span class=\"hljs-string\">&quot;\\n&quot;</span>));\n        } <span class=\"hljs-keyword\">catch</span> (NoSuchFileException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileProcessingException</span>(<span class=\"hljs-string\">&quot;File not found: &quot;</span> + filename, e);\n        } <span class=\"hljs-keyword\">catch</span> (AccessDeniedException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileProcessingException</span>(<span class=\"hljs-string\">&quot;Access denied to file: &quot;</span> + filename, e);\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileProcessingException</span>(<span class=\"hljs-string\">&quot;Error reading file: &quot;</span> + filename, e);\n        }\n    }\n}\n</code></pre><h3>Example 2: Database Operations</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findUserById</span><span class=\"hljs-params\">(Long id)</span> <span class=\"hljs-keyword\">throws</span> UserNotFoundException {\n        <span class=\"hljs-keyword\">if</span> (id == <span class=\"hljs-literal\">null</span> || id &lt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;User ID must be positive&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">conn</span> <span class=\"hljs-operator\">=</span> dataSource.getConnection();\n             <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">stmt</span> <span class=\"hljs-operator\">=</span> conn.prepareStatement(<span class=\"hljs-string\">&quot;SELECT * FROM users WHERE id = ?&quot;</span>)) {\n\n            stmt.setLong(<span class=\"hljs-number\">1</span>, id);\n            <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">rs</span> <span class=\"hljs-operator\">=</span> stmt.executeQuery();\n\n            <span class=\"hljs-keyword\">if</span> (rs.next()) {\n                <span class=\"hljs-keyword\">return</span> mapToUser(rs);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserNotFoundException</span>(<span class=\"hljs-string\">&quot;No user found with ID: &quot;</span> + id);\n            }\n\n        } <span class=\"hljs-keyword\">catch</span> (SQLException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DatabaseException</span>(<span class=\"hljs-string\">&quot;Database error while finding user&quot;</span>, e);\n        }\n    }\n}\n</code></pre><h3>Example 3: Input Validation</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Calculator</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">divide</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> dividend, <span class=\"hljs-type\">double</span> divisor)</span> {\n        <span class=\"hljs-keyword\">if</span> (divisor == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArithmeticException</span>(<span class=\"hljs-string\">&quot;Division by zero is not allowed&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (Double.isNaN(dividend) || Double.isNaN(divisor)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;NaN values are not supported&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">return</span> dividend / divisor;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">factorial</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Factorial is not defined for negative numbers&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">20</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArithmeticException</span>(<span class=\"hljs-string\">&quot;Factorial too large, would cause overflow&quot;</span>);\n        }\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\n            result *= i;\n        }\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n}\n</code></pre><hr>\n<h2>Exception Handling Patterns</h2>\n<h3>Pattern 1: Translation Pattern</h3>\n<p>Convert low-level exceptions to high-level, domain-specific exceptions:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderService</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveOrder</span><span class=\"hljs-params\">(Order order)</span> <span class=\"hljs-keyword\">throws</span> OrderProcessingException {\n        <span class=\"hljs-keyword\">try</span> {\n            database.save(order);\n        } <span class=\"hljs-keyword\">catch</span> (SQLException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderProcessingException</span>(<span class=\"hljs-string\">&quot;Failed to save order&quot;</span>, e);\n        }\n    }\n}\n</code></pre><h3>Pattern 2: Recovery Pattern</h3>\n<p>Try to recover from the error:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">loadConfiguration</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">return</span> Files.readString(Paths.get(<span class=\"hljs-string\">&quot;app.config&quot;</span>));\n    } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n        logger.warn(<span class=\"hljs-string\">&quot;Could not load configuration file, using defaults&quot;</span>, e);\n        <span class=\"hljs-keyword\">return</span> getDefaultConfiguration();\n    }\n}\n</code></pre><h3>Pattern 3: Circuit Breaker Pattern</h3>\n<p>Fail fast when a resource is unavailable:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExternalServiceClient</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">circuitOpen</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">callExternalService</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ServiceUnavailableException {\n        <span class=\"hljs-keyword\">if</span> (circuitOpen) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServiceUnavailableException</span>(<span class=\"hljs-string\">&quot;Circuit breaker is open&quot;</span>);\n        }\n\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">return</span> performNetworkCall();\n        } <span class=\"hljs-keyword\">catch</span> (NetworkException e) {\n            circuitOpen = <span class=\"hljs-literal\">true</span>;\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServiceUnavailableException</span>(<span class=\"hljs-string\">&quot;External service unavailable&quot;</span>, e);\n        }\n    }\n}\n</code></pre><hr>\n<h2>Common Pitfalls and How to Avoid Them</h2>\n<h3>Pitfall 1: Generic Exception Catching</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Bad</span>\n<span class=\"hljs-keyword\">try</span> {\n    someOperation();\n} <span class=\"hljs-keyword\">catch</span> (Exception e) {\n    <span class=\"hljs-comment\">// Too broad!</span>\n}\n\n<span class=\"hljs-comment\">// Good</span>\n<span class=\"hljs-keyword\">try</span> {\n    someOperation();\n} <span class=\"hljs-keyword\">catch</span> (SpecificException e) {\n    <span class=\"hljs-comment\">// Handle specific case</span>\n} <span class=\"hljs-keyword\">catch</span> (AnotherSpecificException e) {\n    <span class=\"hljs-comment\">// Handle another specific case</span>\n}\n</code></pre><h3>Pitfall 2: Exception Conversion Antipattern</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Bad: Converting checked to unchecked without good reason</span>\n<span class=\"hljs-keyword\">try</span> {\n    checkedOperation();\n} <span class=\"hljs-keyword\">catch</span> (CheckedException e) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e); <span class=\"hljs-comment\">// Loses important type information</span>\n}\n\n<span class=\"hljs-comment\">// Good: Provide meaningful domain exception</span>\n<span class=\"hljs-keyword\">try</span> {\n    checkedOperation();\n} <span class=\"hljs-keyword\">catch</span> (CheckedException e) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessLogicException</span>(<span class=\"hljs-string\">&quot;Operation failed due to data issue&quot;</span>, e);\n}\n</code></pre><h3>Pitfall 3: Resource Leaks</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Bad: Manual resource management</span>\n<span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">try</span> {\n    fis = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;file.txt&quot;</span>);\n    <span class=\"hljs-comment\">// Use stream</span>\n} <span class=\"hljs-keyword\">catch</span> (IOException e) {\n    <span class=\"hljs-comment\">// Handle error</span>\n} <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">if</span> (fis != <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">try</span> {\n            fis.close(); <span class=\"hljs-comment\">// Can also throw IOException!</span>\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-comment\">// What do we do here?</span>\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// Good: Try-with-resources</span>\n<span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;file.txt&quot;</span>)) {\n    <span class=\"hljs-comment\">// Use stream - automatically closed</span>\n} <span class=\"hljs-keyword\">catch</span> (IOException e) {\n    <span class=\"hljs-comment\">// Handle error - resource still cleaned up</span>\n}\n</code></pre><hr>\n<h2>Advanced Topics on exceptions</h2>\n<h3>Exception Suppression</h3>\n<p>When using try-with-resources, if both the try block and the close() method throw exceptions, the close() exception is suppressed:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileReader</span> <span class=\"hljs-variable\">reader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileReader</span>(<span class=\"hljs-string\">&quot;file.txt&quot;</span>)) {\n    <span class=\"hljs-comment\">// If this throws IOException</span>\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IOException</span>(<span class=\"hljs-string\">&quot;Processing error&quot;</span>);\n    <span class=\"hljs-comment\">// And reader.close() also throws IOException</span>\n    <span class=\"hljs-comment\">// The close() exception is suppressed</span>\n} <span class=\"hljs-keyword\">catch</span> (IOException e) {\n    System.out.println(<span class=\"hljs-string\">&quot;Main exception: &quot;</span> + e.getMessage());\n\n    <span class=\"hljs-comment\">// Access suppressed exceptions</span>\n    Throwable[] suppressed = e.getSuppressed();\n    <span class=\"hljs-keyword\">for</span> (Throwable s : suppressed) {\n        System.out.println(<span class=\"hljs-string\">&quot;Suppressed: &quot;</span> + s.getMessage());\n    }\n}\n</code></pre><h3>Stack Trace Analysis</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">demonstrateStackTrace</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">try</span> {\n        methodA();\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n        <span class=\"hljs-comment\">// Print full stack trace</span>\n        e.printStackTrace();\n\n        <span class=\"hljs-comment\">// Get stack trace elements programmatically</span>\n        StackTraceElement[] stack = e.getStackTrace();\n        <span class=\"hljs-keyword\">for</span> (StackTraceElement element : stack) {\n            System.out.println(<span class=\"hljs-string\">&quot;Method: &quot;</span> + element.getMethodName() +\n                             <span class=\"hljs-string\">&quot; in &quot;</span> + element.getClassName() +\n                             <span class=\"hljs-string\">&quot; at line &quot;</span> + element.getLineNumber());\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">methodA</span><span class=\"hljs-params\">()</span> {\n    methodB();\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">methodB</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;Something went wrong in methodB&quot;</span>);\n}\n</code></pre><hr>\n<h2>Complete Working Example</h2>\n<p>Let&#39;s put it all together with a comprehensive banking system example:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.io.*;\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankingSystem</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-string\">&quot;12345&quot;</span>, <span class=\"hljs-number\">1000.0</span>);\n\n        <span class=\"hljs-comment\">// Example 1: Successful withdrawal</span>\n        <span class=\"hljs-keyword\">try</span> {\n            account.withdraw(<span class=\"hljs-number\">200.0</span>);\n            System.out.println(<span class=\"hljs-string\">&quot;Withdrawal successful. New balance: &quot;</span> + account.getBalance());\n        } <span class=\"hljs-keyword\">catch</span> (InsufficientFundsException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Transaction failed: &quot;</span> + e.getMessage());\n            System.out.println(<span class=\"hljs-string\">&quot;Available balance: &quot;</span> + e.getAvailableBalance());\n        }\n\n        <span class=\"hljs-comment\">// Example 2: Failed withdrawal</span>\n        <span class=\"hljs-keyword\">try</span> {\n            account.withdraw(<span class=\"hljs-number\">2000.0</span>);\n        } <span class=\"hljs-keyword\">catch</span> (InsufficientFundsException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Transaction failed: &quot;</span> + e.getMessage());\n            handleInsufficientFunds(e);\n        }\n\n        <span class=\"hljs-comment\">// Example 3: File operations with proper error handling</span>\n        <span class=\"hljs-keyword\">try</span> {\n            account.saveToFile(<span class=\"hljs-string\">&quot;account.txt&quot;</span>);\n            System.out.println(<span class=\"hljs-string\">&quot;Account saved successfully&quot;</span>);\n        } <span class=\"hljs-keyword\">catch</span> (AccountPersistenceException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Failed to save account: &quot;</span> + e.getMessage());\n            <span class=\"hljs-comment\">// Log full stack trace for debugging</span>\n            e.printStackTrace();\n        }\n\n        <span class=\"hljs-comment\">// Example 4: Invalid operations</span>\n        <span class=\"hljs-keyword\">try</span> {\n            account.withdraw(-<span class=\"hljs-number\">50</span>); <span class=\"hljs-comment\">// Invalid amount</span>\n        } <span class=\"hljs-keyword\">catch</span> (IllegalArgumentException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Invalid operation: &quot;</span> + e.getMessage());\n        } <span class=\"hljs-keyword\">catch</span> (InsufficientFundsException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Insufficient funds: &quot;</span> + e.getMessage());\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleInsufficientFunds</span><span class=\"hljs-params\">(InsufficientFundsException e)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Suggested actions:&quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;1. Deposit additional funds&quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;2. Withdraw a smaller amount (max: &quot;</span> + e.getAvailableBalance() + <span class=\"hljs-string\">&quot;)&quot;</span>);\n        System.out.println(<span class=\"hljs-string\">&quot;3. Contact customer service&quot;</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span> {\n    <span class=\"hljs-keyword\">private</span> String accountNumber;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BankAccount</span><span class=\"hljs-params\">(String accountNumber, <span class=\"hljs-type\">double</span> initialBalance)</span> {\n        <span class=\"hljs-keyword\">if</span> (accountNumber == <span class=\"hljs-literal\">null</span> || accountNumber.trim().isEmpty()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Account number cannot be null or empty&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (initialBalance &lt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Initial balance cannot be negative&quot;</span>);\n        }\n\n        <span class=\"hljs-built_in\">this</span>.accountNumber = accountNumber;\n        <span class=\"hljs-built_in\">this</span>.balance = initialBalance;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">withdraw</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span> <span class=\"hljs-keyword\">throws</span> InsufficientFundsException {\n        validateAmount(amount);\n\n        <span class=\"hljs-keyword\">if</span> (amount &gt; balance) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InsufficientFundsException</span>(\n                <span class=\"hljs-string\">&quot;Insufficient funds for withdrawal of &quot;</span> + amount,\n                balance,\n                amount\n            );\n        }\n\n        balance -= amount;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span> {\n        validateAmount(amount);\n        balance += amount;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">validateAmount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span> {\n        <span class=\"hljs-keyword\">if</span> (amount &lt;= <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Amount must be positive&quot;</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (Double.isNaN(amount) || Double.isInfinite(amount)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Amount must be a valid number&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveToFile</span><span class=\"hljs-params\">(String filename)</span> <span class=\"hljs-keyword\">throws</span> AccountPersistenceException {\n        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrintWriter</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileWriter</span>(filename))) {\n            writer.println(<span class=\"hljs-string\">&quot;Account Number: &quot;</span> + accountNumber);\n            writer.println(<span class=\"hljs-string\">&quot;Balance: &quot;</span> + balance);\n            writer.println(<span class=\"hljs-string\">&quot;Last Updated: &quot;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AccountPersistenceException</span>(\n                <span class=\"hljs-string\">&quot;Failed to save account &quot;</span> + accountNumber + <span class=\"hljs-string\">&quot; to file &quot;</span> + filename, e);\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getBalance</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> balance;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAccountNumber</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> accountNumber;\n    }\n}\n\n<span class=\"hljs-comment\">// Custom Checked Exception</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InsufficientFundsException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Exception</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> availableBalance;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> requestedAmount;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">InsufficientFundsException</span><span class=\"hljs-params\">(String message, <span class=\"hljs-type\">double</span> availableBalance, <span class=\"hljs-type\">double</span> requestedAmount)</span> {\n        <span class=\"hljs-built_in\">super</span>(message);\n        <span class=\"hljs-built_in\">this</span>.availableBalance = availableBalance;\n        <span class=\"hljs-built_in\">this</span>.requestedAmount = requestedAmount;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getAvailableBalance</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> availableBalance;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getRequestedAmount</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> requestedAmount;\n    }\n}\n\n<span class=\"hljs-comment\">// Custom Checked Exception for Persistence</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AccountPersistenceException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Exception</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AccountPersistenceException</span><span class=\"hljs-params\">(String message, Throwable cause)</span> {\n        <span class=\"hljs-built_in\">super</span>(message, cause);\n    }\n}\n</code></pre><hr>\n<h2>Summary and Key Takeaways</h2>\n<ol>\n<li><strong>Exceptions are objects</strong> that represent errors and provide information about what went wrong</li>\n<li><strong>Checked exceptions</strong> must be handled or declared, while <strong>unchecked exceptions</strong> are optional to handle</li>\n<li><strong>Try-catch-finally</strong> provides structured error handling with guaranteed cleanup</li>\n<li><strong>Try-with-resources</strong> automatically manages resource cleanup</li>\n<li><strong>Custom exceptions</strong> should provide meaningful context and follow naming conventions</li>\n<li><strong>Exception chaining</strong> preserves the original cause while providing domain-specific context</li>\n<li><strong>Best practices</strong> include being specific, failing fast, and providing good error messages</li>\n</ol>\n<h2>Practice Exercises</h2>\n<ol>\n<li>Create a custom <code>EmailValidationException</code> and use it in a user registration system</li>\n<li>Write a file backup utility that handles various IO exceptions gracefully</li>\n<li>Implement a retry mechanism for network operations that fail</li>\n<li>Create a validation framework that throws specific exceptions for different validation failures</li>\n</ol>\n<p>Remember: Good exception handling makes your code more robust, easier to debug, and provides better user experience!</p>\n<hr>\n<h1>Java Generics — Upper Bounds, Lower Bounds, and Type Erasure</h1>\n<hr>\n<h2>Motivation: Why Generics?</h2>\n<ul>\n<li>Generics let us <strong>parameterize types</strong>.</li>\n<li>Instead of writing one container for <code>int</code>, one for <code>String</code>, one for <code>User</code>, we write <strong>one generic class</strong> that works with all.</li>\n</ul>\n<p>👉 Example:</p>\n<pre><code class=\"hljs language-java\">genericList&lt;Integer&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">genericList</span>&lt;&gt;();\nlist.add(<span class=\"hljs-number\">12</span>); <span class=\"hljs-comment\">// Compiler automatically boxes int → Integer</span>\n</code></pre><hr>\n<h2>Generic Methods</h2>\n<p>We can also write methods that are <strong>generic</strong>:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Number</span>&gt; T <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(T n1, T n2, BinaryOperator&lt;T&gt; adder)</span> {\n    <span class=\"hljs-keyword\">return</span> adder.apply(n1, n2);\n}\n</code></pre><ul>\n<li><code>&lt;T extends Number&gt;</code> → This restricts <code>T</code> to subclasses of <code>Number</code>.</li>\n<li>This means you can’t pass a <code>String</code>.</li>\n<li>You can also bound to <strong>interfaces</strong> (<code>Comparable</code>, <code>Cloneable</code>, or multiple using <code>&amp;</code>).</li>\n</ul>\n<hr>\n<h2>Generics and Inheritance</h2>\n<p>⚠️ Important rule: <strong>Generics are invariant.</strong></p>\n<p>That means:</p>\n<ul>\n<li><code>Instructor</code> is a subclass of <code>User</code>.</li>\n<li>But <code>genericList&lt;Instructor&gt;</code> is <strong>not</strong> a subclass of <code>genericList&lt;User&gt;</code>.</li>\n</ul>\n<p>👉 Example:</p>\n<pre><code class=\"hljs language-java\">genericList&lt;User&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">genericList</span>&lt;&gt;();\ngenericList&lt;Instructor&gt; instructors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">genericList</span>&lt;&gt;();\n<span class=\"hljs-comment\">// ❌ You cannot assign instructors to users</span>\n</code></pre><p>Why? Because it would break type safety — you could try to put a <code>User</code> into a <code>genericList&lt;Instructor&gt;</code>.</p>\n<hr>\n<h2>Wildcards to the Rescue</h2>\n<p>Wildcards let us relax this restriction.</p>\n<h3>Upper Bound (<code>? extends T</code>)</h3>\n<ul>\n<li><code>? extends User</code> means: <em>“a list of some subtype of User”</em>.</li>\n<li>You can <strong>read safely</strong>, but <strong>can’t add</strong>, because the compiler doesn’t know the exact subtype.</li>\n</ul>\n<h3>Lower Bound (<code>? super T</code>)</h3>\n<ul>\n<li><code>? super User</code> means: <em>“a list of some supertype of User”</em>.</li>\n<li>You can <strong>safely add Users or subclasses (Instructor)</strong>, but reading gives you <code>Object</code>.</li>\n</ul>\n<p>👉 Example from your code:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printUsers</span><span class=\"hljs-params\">(genericList&lt;? <span class=\"hljs-built_in\">super</span> User&gt; users)</span> {\n    users.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Instructor</span>(<span class=\"hljs-number\">2</span>));  <span class=\"hljs-comment\">// ✅ Safe</span>\n    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> users.get(<span class=\"hljs-number\">0</span>);     <span class=\"hljs-comment\">// ❌ Only Object, not User</span>\n}\n</code></pre><hr>\n<h2>CEPS — The Core Concepts</h2>\n<ol>\n<li><p><strong>Compile-time safety</strong>\nGenerics catch type errors early. No need for casting.</p>\n</li>\n<li><p><strong>Erasure</strong></p>\n<ul>\n<li>Generics don’t exist at runtime in Java.</li>\n<li>The compiler erases them and treats them as <code>Object</code>.</li>\n<li>Example: <code>genericList&lt;Integer&gt;</code> becomes <code>genericList&lt;Object&gt;</code> internally.</li>\n</ul>\n</li>\n<li><p><strong>Polymorphism</strong>\nGenerics allow code reuse for multiple types (e.g., one <code>genericList</code> for all).</p>\n</li>\n<li><p><strong>Subtyping (and why it’s tricky)</strong></p>\n<ul>\n<li>Regular inheritance does not apply directly to generics (<code>List&lt;Cat&gt;</code> is not a <code>List&lt;Animal&gt;</code>).</li>\n<li>Wildcards help us bridge that gap.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>Comparable Example</h2>\n<p>Your <code>User</code> implements <code>Comparable&lt;User&gt;</code>:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;User&gt; {\n    <span class=\"hljs-type\">int</span> age;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(User other)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.age - other.age;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;user&quot;</span>; }\n}\n</code></pre><ul>\n<li>This shows how generics work with <strong>interfaces</strong>.</li>\n<li>We can compare two users safely, because the compiler enforces type matching.</li>\n</ul>\n<hr>\n<h2>Big Picture</h2>\n<ul>\n<li>Use <strong>upper bounds (<code>extends</code>)</strong> when you want to <strong>read</strong> from a structure.</li>\n<li>Use <strong>lower bounds (<code>super</code>)</strong> when you want to <strong>write</strong> to it.</li>\n<li>Remember <strong>type erasure</strong> → at runtime, all generics become raw <code>Object</code> types.</li>\n<li>Generics give us <strong>type safety</strong>, <strong>polymorphism</strong>, and <strong>reusable code</strong> without duplication.</li>\n</ul>\n<hr>\n<h1>🎤 Tip</h1>\n<ul>\n<li>&quot;<code>extends</code> is for producers (they produce values you read).&quot;</li>\n<li>&quot;<code>super</code> is for consumers (they consume values you put in).&quot;</li>\n</ul>\n<p>👉 This is the <strong>PECS rule</strong> (Producer Extends, Consumer Super).</p>\n<hr>\n<h1>Java Collections Framework</h1>\n<h2>Introduction</h2>\n<p>The <strong>Java Collections Framework (JCF)</strong> provides a set of interfaces and classes to store and manipulate groups of objects. Instead of manually building arrays and data structures, JCF gives us powerful, reusable, and efficient implementations.</p>\n<p>Key ideas:</p>\n<ul>\n<li>A <strong>Collection</strong> = a group of objects.</li>\n<li>Interfaces like <code>List</code>, <code>Set</code>, <code>Queue</code>, and <code>Map</code> define <strong>different types of collections</strong>.</li>\n<li>Utility classes like <code>Collections</code> provide helpful static methods (sorting, searching, adding multiple items, etc.).</li>\n</ul>\n<hr>\n<h2>The <code>Collection</code> Interface</h2>\n<p>The <code>Collection</code> interface is the <strong>root</strong> of the collection hierarchy (except for maps). It provides basic operations such as:</p>\n<ul>\n<li><code>add(E element)</code></li>\n<li><code>remove(Object element)</code></li>\n<li><code>contains(Object element)</code></li>\n<li><code>clear()</code></li>\n<li><code>equals(Object other)</code></li>\n<li>Iteration (with for-each or an iterator).</li>\n</ul>\n<h3>Example: Using a <code>Collection</code></h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collection;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Coll</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">()</span> {\n        Collection&lt;String&gt; col = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n\n        col.add(<span class=\"hljs-string\">&quot;a&quot;</span>);\n        col.add(<span class=\"hljs-string\">&quot;b&quot;</span>);\n        col.add(<span class=\"hljs-string\">&quot;c&quot;</span>);\n        col.add(<span class=\"hljs-string\">&quot;d&quot;</span>);\n        Collections.addAll(col, <span class=\"hljs-string\">&quot;s&quot;</span>, <span class=\"hljs-string\">&quot;dd&quot;</span>); <span class=\"hljs-comment\">// bulk add</span>\n        col.remove(<span class=\"hljs-string\">&quot;dd&quot;</span>); <span class=\"hljs-comment\">// remove element</span>\n\n        System.out.println(col);               <span class=\"hljs-comment\">// [a, b, c, d, s]</span>\n        System.out.println(col.contains(<span class=\"hljs-string\">&quot;a&quot;</span>)); <span class=\"hljs-comment\">// true</span>\n\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();\n        Collections.addAll(res, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>);\n\n        System.out.println(col.equals(res)); <span class=\"hljs-comment\">// compares content, not reference</span>\n        col.clear();\n        System.out.println(col);             <span class=\"hljs-comment\">// []</span>\n    }\n}\n</code></pre><hr>\n<h2>Iteration and <code>Iterable&lt;T&gt;</code></h2>\n<p>Collections support iteration using the <strong><code>Iterable&lt;T&gt;</code></strong> interface.</p>\n<h3>Key concepts:</h3>\n<ul>\n<li><code>Iterable&lt;T&gt;</code> requires <code>iterator()</code>.</li>\n<li><code>Iterator&lt;T&gt;</code> provides:<ul>\n<li><code>hasNext()</code></li>\n<li><code>next()</code></li>\n</ul>\n</li>\n</ul>\n<h3>Example: Custom Generic List</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.Iterator;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericList</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterable</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">private</span> T[] data;\n\n    <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GenericList</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> cap)</span> {\n        <span class=\"hljs-built_in\">this</span>.data = (T[]) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[cap];\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(T item)</span> {\n        <span class=\"hljs-keyword\">if</span> (count &lt; data.length)\n            data[count++] = item;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Iterator&lt;T&gt; <span class=\"hljs-title function_\">iterator</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GenericListIterator</span>&lt;&gt;(<span class=\"hljs-built_in\">this</span>);\n    }\n\n    <span class=\"hljs-comment\">// Inner iterator class</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericListIterator</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterator</span>&lt;T&gt; {\n        <span class=\"hljs-keyword\">private</span> GenericList&lt;T&gt; gl;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n        GenericListIterator(GenericList&lt;T&gt; list) {\n            <span class=\"hljs-built_in\">this</span>.gl = list; <span class=\"hljs-comment\">// reference, not a copy</span>\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasNext</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> index &lt; gl.count;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> gl.data[index++];\n        }\n    }\n}\n</code></pre><p>✅ Each call to <code>iterator()</code> returns a <strong>new iterator</strong> object, so multiple loops can iterate independently.</p>\n<hr>\n<h2>The <code>List</code> Interface</h2>\n<p>A <code>List</code>:</p>\n<ul>\n<li>Represents an <strong>ordered sequence</strong>.</li>\n<li>Supports index-based access.</li>\n<li>Allows duplicates.</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Lists</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">()</span> {\n        List&lt;String&gt; names = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        names.add(<span class=\"hljs-string\">&quot;Alice&quot;</span>);\n        names.add(<span class=\"hljs-string\">&quot;Bob&quot;</span>);\n\n        List&lt;Integer&gt; ints = List.of(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// immutable list</span>\n        System.out.println(ints);                 <span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n        System.out.println(names);                <span class=\"hljs-comment\">// [Alice, Bob]</span>\n        System.out.println(ints.subList(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>));   <span class=\"hljs-comment\">// [1, 2]</span>\n    }\n}\n</code></pre><hr>\n<h2>Sorting: <code>Comparable</code> and <code>Comparator</code></h2>\n<p>Sorting requires either:</p>\n<ul>\n<li><code>Comparable&lt;T&gt;</code> → defines a <strong>natural order</strong>.</li>\n<li><code>Comparator&lt;T&gt;</code> → provides a <strong>custom order</strong>.</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sorting</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">cus</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Customer&gt;();\n        cus.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Customer</span>(<span class=\"hljs-string\">&quot;Amr&quot;</span>, <span class=\"hljs-number\">100</span>));\n        cus.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Customer</span>(<span class=\"hljs-string\">&quot;zzz&quot;</span>, <span class=\"hljs-number\">11</span>));\n        cus.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Customer</span>(<span class=\"hljs-string\">&quot;huda&quot;</span>, <span class=\"hljs-number\">90</span>));\n        cus.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Customer</span>(<span class=\"hljs-string\">&quot;salwa&quot;</span>, <span class=\"hljs-number\">1000</span>));\n\n        Collections.sort(cus); <span class=\"hljs-comment\">// natural order: by name</span>\n        cus.sort(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomerComparator</span>()); <span class=\"hljs-comment\">// custom: by invoice</span>\n        System.out.println(cus);\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Customer</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Customer&gt; {\n        String name;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> invoice;\n\n        Customer(String name, <span class=\"hljs-type\">int</span> in) {\n            <span class=\"hljs-built_in\">this</span>.name = name;\n            <span class=\"hljs-built_in\">this</span>.invoice = in;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Customer c)</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name.compareTo(c.name); <span class=\"hljs-comment\">// alphabetical</span>\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getInvoice</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> invoice;\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n            <span class=\"hljs-keyword\">return</span> name + <span class=\"hljs-string\">&quot; (&quot;</span> + invoice + <span class=\"hljs-string\">&quot;)&quot;</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomerComparator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Customer&gt; {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Customer o1, Customer o2)</span> {\n            <span class=\"hljs-keyword\">return</span> o2.getInvoice() - o1.getInvoice(); <span class=\"hljs-comment\">// descending invoices</span>\n        }\n    }\n}\n</code></pre><hr>\n<h2>The <code>Queue</code> Interface</h2>\n<p>A <code>Queue</code>:</p>\n<ul>\n<li>Models jobs to be processed in order.</li>\n<li>Methods:<ul>\n<li><code>add()</code> / <code>offer()</code></li>\n<li><code>remove()</code> / <code>poll()</code></li>\n<li><code>peek()</code></li>\n</ul>\n</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.ArrayDeque;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QueueInterface</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Queue&lt;String&gt; ppl = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayDeque</span>&lt;&gt;();\n\n        ppl.add(<span class=\"hljs-string\">&quot;amr&quot;</span>);\n        ppl.add(<span class=\"hljs-string\">&quot;ola&quot;</span>);\n        ppl.add(<span class=\"hljs-string\">&quot;soliman&quot;</span>);\n\n        System.out.println(ppl.peek());   <span class=\"hljs-comment\">// look at front</span>\n        System.out.println(ppl.remove()); <span class=\"hljs-comment\">// remove front</span>\n        System.out.println(ppl.poll());   <span class=\"hljs-comment\">// remove or return null if empty</span>\n    }\n}\n</code></pre><hr>\n<h2>7. The <code>Set</code> Interface</h2>\n<p>A <code>Set</code>:</p>\n<ul>\n<li>Stores <strong>unique values</strong>.</li>\n<li>No duplicates.</li>\n<li>Useful for unions, intersections, and difference.</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SetDemo</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Set&lt;Integer&gt; ids = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;(List.of(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>));\n        Set&lt;Integer&gt; ids2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;(List.of(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>));\n\n        ids.retainAll(ids2); <span class=\"hljs-comment\">// intersection</span>\n        System.out.println(ids); <span class=\"hljs-comment\">// [3, 4]</span>\n    }\n}\n</code></pre><hr>\n<h2>8. The <code>Map</code> Interface</h2>\n<p>A <code>Map&lt;K, V&gt;</code>:</p>\n<ul>\n<li>Stores key-value pairs.</li>\n<li>Keys are unique, values can repeat.</li>\n<li>Fast lookups.</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashTables</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        Map&lt;Integer, String&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n        users.put(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;amr&quot;</span>);\n        users.put(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;ola&quot;</span>);\n        users.put(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;rawia&quot;</span>);\n\n        System.out.println(users.get(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// lookup by key</span>\n        users.replace(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;Aaaa&quot;</span>);\n        System.out.println(users);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> entry : users.entrySet())\n            System.out.println(entry.getKey() + <span class=\"hljs-string\">&quot; -&gt; &quot;</span> + entry.getValue());\n    }\n}\n</code></pre><hr>\n<h2>9. Recap</h2>\n<ul>\n<li><strong>Collection</strong>: root interface (add/remove/contains).</li>\n<li><strong>List</strong>: ordered, indexable, duplicates allowed.</li>\n<li><strong>Set</strong>: unique values.</li>\n<li><strong>Queue</strong>: process elements in order.</li>\n<li><strong>Map</strong>: key-value pairs (not a Collection but part of JCF).</li>\n<li>Sorting:<ul>\n<li><code>Comparable</code>: natural order.</li>\n<li><code>Comparator</code>: custom order.</li>\n</ul>\n</li>\n</ul>\n<hr>\n","markdown":"# **Java Exception Handling**\n\n## _Learning Objectives_\n\n- Understand what exceptions are and why they're important\n- Distinguish between checked and unchecked exceptions\n- Use try-catch-finally blocks effectively\n- Create custom exceptions\n- Apply best practices for exception handling\n\n---\n\n## What is an Exception?\n\nAn **exception** is an object that contains information about an error that occurred during program execution. When an error occurs, Java creates an exception object and \"throws\" it, disrupting the normal flow of the program.\n\n### Why Do We Need Exception Handling?\n\n- **Graceful Error Recovery**: Handle errors without crashing the application\n- **User Experience**: Provide meaningful error messages to users\n- **Debugging**: Get detailed information about what went wrong\n- **Resource Management**: Ensure resources are properly cleaned up\n\n---\n\n## The Exception Hierarchy\n\nJava organizes exceptions in a hierarchy:\n\n```\nThrowable\n├── Exception (Recoverable errors)\n│   ├── IOException (Checked)\n│   ├── SQLException (Checked)\n│   └── RuntimeException (Unchecked)\n│       ├── NullPointerException\n│       ├── IndexOutOfBoundsException\n│       └── IllegalArgumentException\n└── Error (Serious system errors)\n    ├── OutOfMemoryError\n    └── StackOverflowError\n```\n\n### Types of Exceptions\n\n#### 1. Checked Exceptions\n\n- **Must** be handled or declared to be thrown\n- Compiler enforces handling\n- Examples: `IOException`, `SQLException`, `FileNotFoundException`\n- Represent recoverable conditions\n\n#### 2. Unchecked Exceptions (Runtime Exceptions)\n\n- **Optional** to handle\n- Occur at runtime due to programming errors\n- Examples: `NullPointerException`, `IndexOutOfBoundsException`\n- Usually indicate bugs in code\n\n#### 3. Errors\n\n- Serious problems outside application control\n- Examples: `OutOfMemoryError`, `StackOverflowError`\n- Generally should not be caught\n\n---\n\n## Basic Exception Handling: Try-Catch\n\n### Simple Try-Catch Block\n\n```java\ntry {\n    // Code that might throw an exception\n    String result = riskyOperation();\n} catch (SpecificException e) {\n    // Handle the specific exception\n    System.out.println(\"Error occurred: \" + e.getMessage());\n}\n```\n\n### Multiple Catch Blocks\n\n```java\ntry {\n    processFile(\"data.txt\");\n} catch (FileNotFoundException e) {\n    System.out.println(\"File not found: \" + e.getMessage());\n} catch (IOException e) {\n    System.out.println(\"IO error: \" + e.getMessage());\n} catch (Exception e) {\n    System.out.println(\"Unexpected error: \" + e.getMessage());\n}\n```\n\n### Multi-Catch (Java 7+)\n\n```java\ntry {\n    performOperation();\n} catch (IOException | SQLException e) {\n    System.out.println(\"Database or file error: \" + e.getMessage());\n}\n```\n\n---\n\n## The Finally Block\n\nThe `finally` block **always** executes, regardless of whether an exception occurs:\n\n```java\nFileReader reader = null;\ntry {\n    reader = new FileReader(\"important.txt\");\n    // Process file\n} catch (IOException e) {\n    System.out.println(\"File error: \" + e.getMessage());\n} finally {\n    // Cleanup code - ALWAYS runs\n    if (reader != null) {\n        try {\n            reader.close();\n        } catch (IOException e) {\n            System.out.println(\"Error closing file\");\n        }\n    }\n    System.out.println(\"Cleanup completed\");\n}\n```\n\n---\n\n## Try-With-Resources (Automatic Resource Management)\n\nJava 7 introduced try-with-resources for automatic cleanup:\n\n```java\n// Old way (manual resource management)\nFileReader reader = null;\ntry {\n    reader = new FileReader(\"data.txt\");\n    // Use reader\n} finally {\n    if (reader != null) {\n        reader.close();\n    }\n}\n\n// New way (automatic resource management)\ntry (FileReader reader = new FileReader(\"data.txt\")) {\n    // Use reader - automatically closed\n    int character;\n    while ((character = reader.read()) != -1) {\n        System.out.print((char) character);\n    }\n}\n```\n\n### Multiple Resources\n\n```java\ntry (FileReader input = new FileReader(\"input.txt\");\n     FileWriter output = new FileWriter(\"output.txt\")) {\n    // Both resources automatically closed\n    // Process files\n}\n```\n\n---\n\n## Throwing Exceptions\n\n### Using the `throw` Keyword\n\n```java\npublic void validateAge(int age) {\n    if (age < 0) {\n        throw new IllegalArgumentException(\"Age cannot be negative\");\n    }\n    if (age > 150) {\n        throw new IllegalArgumentException(\"Age seems unrealistic\");\n    }\n}\n```\n\n### Using the `throws` Keyword (Method Declaration)\n\n```java\npublic void readConfiguration() throws IOException {\n    // Method that might throw IOException\n    Files.readAllLines(Paths.get(\"config.properties\"));\n}\n\npublic void processData() {\n    try {\n        readConfiguration();\n    } catch (IOException e) {\n        System.out.println(\"Configuration error: \" + e.getMessage());\n    }\n}\n```\n\n---\n\n## Creating Custom Exceptions\n\n### Checked Custom Exception\n\n```java\npublic class InsufficientFundsException extends Exception {\n    private double balance;\n    private double withdrawAmount;\n\n    public InsufficientFundsException() {\n        super(\"Insufficient funds in account\");\n    }\n\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n\n    public InsufficientFundsException(double balance, double withdrawAmount) {\n        super(String.format(\"Insufficient funds. Balance: %.2f, Attempted withdrawal: %.2f\",\n              balance, withdrawAmount));\n        this.balance = balance;\n        this.withdrawAmount = withdrawAmount;\n    }\n\n    // Getters\n    public double getBalance() { return balance; }\n    public double getWithdrawAmount() { return withdrawAmount; }\n}\n```\n\n### Unchecked Custom Exception\n\n```java\npublic class InvalidEmailException extends RuntimeException {\n    public InvalidEmailException(String email) {\n        super(\"Invalid email format: \" + email);\n    }\n}\n```\n\n### Using Custom Exceptions\n\n```java\npublic class BankAccount {\n    private double balance;\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount > balance) {\n            throw new InsufficientFundsException(balance, amount);\n        }\n        balance -= amount;\n    }\n\n    public void setEmail(String email) {\n        if (!email.contains(\"@\")) {\n            throw new InvalidEmailException(email);\n        }\n        // Set email\n    }\n}\n```\n\n---\n\n## Exception Chaining\n\nSometimes you want to catch one exception and throw another while preserving the original cause:\n\n```java\npublic class DataProcessor {\n    public void processUserData(String filename) throws DataProcessingException {\n        try {\n            // Attempt to read file\n            List<String> lines = Files.readAllLines(Paths.get(filename));\n            // Process data...\n        } catch (IOException e) {\n            // Wrap the IOException in our custom exception\n            throw new DataProcessingException(\"Failed to process user data from \" + filename, e);\n        }\n    }\n}\n\npublic class DataProcessingException extends Exception {\n    public DataProcessingException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```\n\n---\n\n## Best Practices for Exception Handling\n\n### **DO's**\n\n1. **Be Specific**: Catch specific exceptions rather than generic `Exception`\n2. **Fail Fast**: Validate inputs early and throw exceptions immediately\n3. **Provide Context**: Include meaningful error messages\n4. **Log Appropriately**: Log exceptions at the right level\n5. **Clean Up Resources**: Use try-with-resources or finally blocks\n\n```java\n// Good: Specific exception handling\npublic void parseInteger(String input) {\n    if (input == null || input.trim().isEmpty()) {\n        throw new IllegalArgumentException(\"Input cannot be null or empty\");\n    }\n\n    try {\n        int result = Integer.parseInt(input.trim());\n        // Process result\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid number format: \" + input, e);\n    }\n}\n```\n\n### DON'Ts\n\n1. **Don't Swallow Exceptions**: Empty catch blocks hide problems\n2. **Don't Catch Exception/Throwable**: Too broad, might hide serious errors\n3. **Don't Use Exceptions for Control Flow**: Exceptions should be exceptional\n4. **Don't Log and Rethrow**: Causes duplicate log entries\n\n```java\n// Bad: Swallowing exceptions\ntry {\n    riskyOperation();\n} catch (Exception e) {\n    // This hides the problem!\n}\n\n// Good: At minimum, log the exception\ntry {\n    riskyOperation();\n} catch (Exception e) {\n    logger.error(\"Failed to perform risky operation\", e);\n    // Decide whether to rethrow, return default, etc.\n}\n```\n\n---\n\n## Practical Examples\n\n### Example 1: File Processing with Proper Error Handling\n\n```java\npublic class FileProcessor {\n    public String readFileContent(String filename) throws FileProcessingException {\n        if (filename == null || filename.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Filename cannot be null or empty\");\n        }\n\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filename))) {\n            return reader.lines()\n                        .collect(Collectors.joining(\"\\n\"));\n        } catch (NoSuchFileException e) {\n            throw new FileProcessingException(\"File not found: \" + filename, e);\n        } catch (AccessDeniedException e) {\n            throw new FileProcessingException(\"Access denied to file: \" + filename, e);\n        } catch (IOException e) {\n            throw new FileProcessingException(\"Error reading file: \" + filename, e);\n        }\n    }\n}\n```\n\n### Example 2: Database Operations\n\n```java\npublic class UserService {\n    public User findUserById(Long id) throws UserNotFoundException {\n        if (id == null || id <= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM users WHERE id = ?\")) {\n\n            stmt.setLong(1, id);\n            ResultSet rs = stmt.executeQuery();\n\n            if (rs.next()) {\n                return mapToUser(rs);\n            } else {\n                throw new UserNotFoundException(\"No user found with ID: \" + id);\n            }\n\n        } catch (SQLException e) {\n            throw new DatabaseException(\"Database error while finding user\", e);\n        }\n    }\n}\n```\n\n### Example 3: Input Validation\n\n```java\npublic class Calculator {\n    public double divide(double dividend, double divisor) {\n        if (divisor == 0) {\n            throw new ArithmeticException(\"Division by zero is not allowed\");\n        }\n\n        if (Double.isNaN(dividend) || Double.isNaN(divisor)) {\n            throw new IllegalArgumentException(\"NaN values are not supported\");\n        }\n\n        return dividend / divisor;\n    }\n\n    public int factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers\");\n        }\n\n        if (n > 20) {\n            throw new ArithmeticException(\"Factorial too large, would cause overflow\");\n        }\n\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}\n```\n\n---\n\n## Exception Handling Patterns\n\n### Pattern 1: Translation Pattern\n\nConvert low-level exceptions to high-level, domain-specific exceptions:\n\n```java\npublic class OrderService {\n    public void saveOrder(Order order) throws OrderProcessingException {\n        try {\n            database.save(order);\n        } catch (SQLException e) {\n            throw new OrderProcessingException(\"Failed to save order\", e);\n        }\n    }\n}\n```\n\n### Pattern 2: Recovery Pattern\n\nTry to recover from the error:\n\n```java\npublic String loadConfiguration() {\n    try {\n        return Files.readString(Paths.get(\"app.config\"));\n    } catch (IOException e) {\n        logger.warn(\"Could not load configuration file, using defaults\", e);\n        return getDefaultConfiguration();\n    }\n}\n```\n\n### Pattern 3: Circuit Breaker Pattern\n\nFail fast when a resource is unavailable:\n\n```java\npublic class ExternalServiceClient {\n    private boolean circuitOpen = false;\n\n    public String callExternalService() throws ServiceUnavailableException {\n        if (circuitOpen) {\n            throw new ServiceUnavailableException(\"Circuit breaker is open\");\n        }\n\n        try {\n            return performNetworkCall();\n        } catch (NetworkException e) {\n            circuitOpen = true;\n            throw new ServiceUnavailableException(\"External service unavailable\", e);\n        }\n    }\n}\n```\n\n---\n\n## Common Pitfalls and How to Avoid Them\n\n### Pitfall 1: Generic Exception Catching\n\n```java\n// Bad\ntry {\n    someOperation();\n} catch (Exception e) {\n    // Too broad!\n}\n\n// Good\ntry {\n    someOperation();\n} catch (SpecificException e) {\n    // Handle specific case\n} catch (AnotherSpecificException e) {\n    // Handle another specific case\n}\n```\n\n### Pitfall 2: Exception Conversion Antipattern\n\n```java\n// Bad: Converting checked to unchecked without good reason\ntry {\n    checkedOperation();\n} catch (CheckedException e) {\n    throw new RuntimeException(e); // Loses important type information\n}\n\n// Good: Provide meaningful domain exception\ntry {\n    checkedOperation();\n} catch (CheckedException e) {\n    throw new BusinessLogicException(\"Operation failed due to data issue\", e);\n}\n```\n\n### Pitfall 3: Resource Leaks\n\n```java\n// Bad: Manual resource management\nFileInputStream fis = null;\ntry {\n    fis = new FileInputStream(\"file.txt\");\n    // Use stream\n} catch (IOException e) {\n    // Handle error\n} finally {\n    if (fis != null) {\n        try {\n            fis.close(); // Can also throw IOException!\n        } catch (IOException e) {\n            // What do we do here?\n        }\n    }\n}\n\n// Good: Try-with-resources\ntry (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Use stream - automatically closed\n} catch (IOException e) {\n    // Handle error - resource still cleaned up\n}\n```\n\n---\n\n## Advanced Topics on exceptions\n\n### Exception Suppression\n\nWhen using try-with-resources, if both the try block and the close() method throw exceptions, the close() exception is suppressed:\n\n```java\ntry (FileReader reader = new FileReader(\"file.txt\")) {\n    // If this throws IOException\n    throw new IOException(\"Processing error\");\n    // And reader.close() also throws IOException\n    // The close() exception is suppressed\n} catch (IOException e) {\n    System.out.println(\"Main exception: \" + e.getMessage());\n\n    // Access suppressed exceptions\n    Throwable[] suppressed = e.getSuppressed();\n    for (Throwable s : suppressed) {\n        System.out.println(\"Suppressed: \" + s.getMessage());\n    }\n}\n```\n\n### Stack Trace Analysis\n\n```java\npublic void demonstrateStackTrace() {\n    try {\n        methodA();\n    } catch (Exception e) {\n        // Print full stack trace\n        e.printStackTrace();\n\n        // Get stack trace elements programmatically\n        StackTraceElement[] stack = e.getStackTrace();\n        for (StackTraceElement element : stack) {\n            System.out.println(\"Method: \" + element.getMethodName() +\n                             \" in \" + element.getClassName() +\n                             \" at line \" + element.getLineNumber());\n        }\n    }\n}\n\nprivate void methodA() {\n    methodB();\n}\n\nprivate void methodB() {\n    throw new RuntimeException(\"Something went wrong in methodB\");\n}\n```\n\n---\n\n## Complete Working Example\n\nLet's put it all together with a comprehensive banking system example:\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class BankingSystem {\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(\"12345\", 1000.0);\n\n        // Example 1: Successful withdrawal\n        try {\n            account.withdraw(200.0);\n            System.out.println(\"Withdrawal successful. New balance: \" + account.getBalance());\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Transaction failed: \" + e.getMessage());\n            System.out.println(\"Available balance: \" + e.getAvailableBalance());\n        }\n\n        // Example 2: Failed withdrawal\n        try {\n            account.withdraw(2000.0);\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Transaction failed: \" + e.getMessage());\n            handleInsufficientFunds(e);\n        }\n\n        // Example 3: File operations with proper error handling\n        try {\n            account.saveToFile(\"account.txt\");\n            System.out.println(\"Account saved successfully\");\n        } catch (AccountPersistenceException e) {\n            System.out.println(\"Failed to save account: \" + e.getMessage());\n            // Log full stack trace for debugging\n            e.printStackTrace();\n        }\n\n        // Example 4: Invalid operations\n        try {\n            account.withdraw(-50); // Invalid amount\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Invalid operation: \" + e.getMessage());\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Insufficient funds: \" + e.getMessage());\n        }\n    }\n\n    private static void handleInsufficientFunds(InsufficientFundsException e) {\n        System.out.println(\"Suggested actions:\");\n        System.out.println(\"1. Deposit additional funds\");\n        System.out.println(\"2. Withdraw a smaller amount (max: \" + e.getAvailableBalance() + \")\");\n        System.out.println(\"3. Contact customer service\");\n    }\n}\n\nclass BankAccount {\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String accountNumber, double initialBalance) {\n        if (accountNumber == null || accountNumber.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Account number cannot be null or empty\");\n        }\n        if (initialBalance < 0) {\n            throw new IllegalArgumentException(\"Initial balance cannot be negative\");\n        }\n\n        this.accountNumber = accountNumber;\n        this.balance = initialBalance;\n    }\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        validateAmount(amount);\n\n        if (amount > balance) {\n            throw new InsufficientFundsException(\n                \"Insufficient funds for withdrawal of \" + amount,\n                balance,\n                amount\n            );\n        }\n\n        balance -= amount;\n    }\n\n    public void deposit(double amount) {\n        validateAmount(amount);\n        balance += amount;\n    }\n\n    private void validateAmount(double amount) {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Amount must be positive\");\n        }\n        if (Double.isNaN(amount) || Double.isInfinite(amount)) {\n            throw new IllegalArgumentException(\"Amount must be a valid number\");\n        }\n    }\n\n    public void saveToFile(String filename) throws AccountPersistenceException {\n        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {\n            writer.println(\"Account Number: \" + accountNumber);\n            writer.println(\"Balance: \" + balance);\n            writer.println(\"Last Updated: \" + new Date());\n        } catch (IOException e) {\n            throw new AccountPersistenceException(\n                \"Failed to save account \" + accountNumber + \" to file \" + filename, e);\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n}\n\n// Custom Checked Exception\nclass InsufficientFundsException extends Exception {\n    private final double availableBalance;\n    private final double requestedAmount;\n\n    public InsufficientFundsException(String message, double availableBalance, double requestedAmount) {\n        super(message);\n        this.availableBalance = availableBalance;\n        this.requestedAmount = requestedAmount;\n    }\n\n    public double getAvailableBalance() {\n        return availableBalance;\n    }\n\n    public double getRequestedAmount() {\n        return requestedAmount;\n    }\n}\n\n// Custom Checked Exception for Persistence\nclass AccountPersistenceException extends Exception {\n    public AccountPersistenceException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```\n\n---\n\n## Summary and Key Takeaways\n\n1. **Exceptions are objects** that represent errors and provide information about what went wrong\n2. **Checked exceptions** must be handled or declared, while **unchecked exceptions** are optional to handle\n3. **Try-catch-finally** provides structured error handling with guaranteed cleanup\n4. **Try-with-resources** automatically manages resource cleanup\n5. **Custom exceptions** should provide meaningful context and follow naming conventions\n6. **Exception chaining** preserves the original cause while providing domain-specific context\n7. **Best practices** include being specific, failing fast, and providing good error messages\n\n## Practice Exercises\n\n1. Create a custom `EmailValidationException` and use it in a user registration system\n2. Write a file backup utility that handles various IO exceptions gracefully\n3. Implement a retry mechanism for network operations that fail\n4. Create a validation framework that throws specific exceptions for different validation failures\n\nRemember: Good exception handling makes your code more robust, easier to debug, and provides better user experience!\n\n---\n\n# Java Generics — Upper Bounds, Lower Bounds, and Type Erasure\n\n---\n\n## Motivation: Why Generics?\n\n- Generics let us **parameterize types**.\n- Instead of writing one container for `int`, one for `String`, one for `User`, we write **one generic class** that works with all.\n\n👉 Example:\n\n```java\ngenericList<Integer> list = new genericList<>();\nlist.add(12); // Compiler automatically boxes int → Integer\n```\n\n---\n\n## Generic Methods\n\nWe can also write methods that are **generic**:\n\n```java\npublic static <T extends Number> T add(T n1, T n2, BinaryOperator<T> adder) {\n    return adder.apply(n1, n2);\n}\n```\n\n- `<T extends Number>` → This restricts `T` to subclasses of `Number`.\n- This means you can’t pass a `String`.\n- You can also bound to **interfaces** (`Comparable`, `Cloneable`, or multiple using `&`).\n\n---\n\n## Generics and Inheritance\n\n⚠️ Important rule: **Generics are invariant.**\n\nThat means:\n\n- `Instructor` is a subclass of `User`.\n- But `genericList<Instructor>` is **not** a subclass of `genericList<User>`.\n\n👉 Example:\n\n```java\ngenericList<User> users = new genericList<>();\ngenericList<Instructor> instructors = new genericList<>();\n// ❌ You cannot assign instructors to users\n```\n\nWhy? Because it would break type safety — you could try to put a `User` into a `genericList<Instructor>`.\n\n---\n\n## Wildcards to the Rescue\n\nWildcards let us relax this restriction.\n\n### Upper Bound (`? extends T`)\n\n- `? extends User` means: _“a list of some subtype of User”_.\n- You can **read safely**, but **can’t add**, because the compiler doesn’t know the exact subtype.\n\n### Lower Bound (`? super T`)\n\n- `? super User` means: _“a list of some supertype of User”_.\n- You can **safely add Users or subclasses (Instructor)**, but reading gives you `Object`.\n\n👉 Example from your code:\n\n```java\npublic static void printUsers(genericList<? super User> users) {\n    users.add(new Instructor(2));  // ✅ Safe\n    Object obj = users.get(0);     // ❌ Only Object, not User\n}\n```\n\n---\n\n## CEPS — The Core Concepts\n\n1. **Compile-time safety**\n   Generics catch type errors early. No need for casting.\n\n2. **Erasure**\n   - Generics don’t exist at runtime in Java.\n   - The compiler erases them and treats them as `Object`.\n   - Example: `genericList<Integer>` becomes `genericList<Object>` internally.\n\n3. **Polymorphism**\n   Generics allow code reuse for multiple types (e.g., one `genericList` for all).\n\n4. **Subtyping (and why it’s tricky)**\n   - Regular inheritance does not apply directly to generics (`List<Cat>` is not a `List<Animal>`).\n   - Wildcards help us bridge that gap.\n\n---\n\n## Comparable Example\n\nYour `User` implements `Comparable<User>`:\n\n```java\npublic static class User implements Comparable<User> {\n    int age;\n\n    @Override\n    public int compareTo(User other) {\n        return this.age - other.age;\n    }\n\n    public String toString() { return \"user\"; }\n}\n```\n\n- This shows how generics work with **interfaces**.\n- We can compare two users safely, because the compiler enforces type matching.\n\n---\n\n## Big Picture\n\n- Use **upper bounds (`extends`)** when you want to **read** from a structure.\n- Use **lower bounds (`super`)** when you want to **write** to it.\n- Remember **type erasure** → at runtime, all generics become raw `Object` types.\n- Generics give us **type safety**, **polymorphism**, and **reusable code** without duplication.\n\n---\n\n# 🎤 Tip\n\n- \"`extends` is for producers (they produce values you read).\"\n- \"`super` is for consumers (they consume values you put in).\"\n\n👉 This is the **PECS rule** (Producer Extends, Consumer Super).\n\n---\n\n# Java Collections Framework\n\n## Introduction\n\nThe **Java Collections Framework (JCF)** provides a set of interfaces and classes to store and manipulate groups of objects. Instead of manually building arrays and data structures, JCF gives us powerful, reusable, and efficient implementations.\n\nKey ideas:\n\n- A **Collection** = a group of objects.\n- Interfaces like `List`, `Set`, `Queue`, and `Map` define **different types of collections**.\n- Utility classes like `Collections` provide helpful static methods (sorting, searching, adding multiple items, etc.).\n\n---\n\n## The `Collection` Interface\n\nThe `Collection` interface is the **root** of the collection hierarchy (except for maps). It provides basic operations such as:\n\n- `add(E element)`\n- `remove(Object element)`\n- `contains(Object element)`\n- `clear()`\n- `equals(Object other)`\n- Iteration (with for-each or an iterator).\n\n### Example: Using a `Collection`\n\n```java\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\n\npublic class Coll {\n    public static void show() {\n        Collection<String> col = new ArrayList<>();\n\n        col.add(\"a\");\n        col.add(\"b\");\n        col.add(\"c\");\n        col.add(\"d\");\n        Collections.addAll(col, \"s\", \"dd\"); // bulk add\n        col.remove(\"dd\"); // remove element\n\n        System.out.println(col);               // [a, b, c, d, s]\n        System.out.println(col.contains(\"a\")); // true\n\n        var res = new ArrayList<String>();\n        Collections.addAll(res, \"a\", \"b\", \"c\", \"d\");\n\n        System.out.println(col.equals(res)); // compares content, not reference\n        col.clear();\n        System.out.println(col);             // []\n    }\n}\n```\n\n---\n\n## Iteration and `Iterable<T>`\n\nCollections support iteration using the **`Iterable<T>`** interface.\n\n### Key concepts:\n\n- `Iterable<T>` requires `iterator()`.\n- `Iterator<T>` provides:\n  - `hasNext()`\n  - `next()`\n\n### Example: Custom Generic List\n\n```java\nimport java.util.Iterator;\n\npublic class GenericList<T> implements Iterable<T> {\n    private int count = 0;\n    private T[] data;\n\n    @SuppressWarnings(\"unchecked\")\n    public GenericList(int cap) {\n        this.data = (T[]) new Object[cap];\n    }\n\n    public void add(T item) {\n        if (count < data.length)\n            data[count++] = item;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        return new GenericListIterator<>(this);\n    }\n\n    // Inner iterator class\n    private static class GenericListIterator<T> implements Iterator<T> {\n        private GenericList<T> gl;\n        private int index = 0;\n\n        GenericListIterator(GenericList<T> list) {\n            this.gl = list; // reference, not a copy\n        }\n\n        @Override\n        public boolean hasNext() {\n            return index < gl.count;\n        }\n\n        @Override\n        public T next() {\n            return gl.data[index++];\n        }\n    }\n}\n```\n\n✅ Each call to `iterator()` returns a **new iterator** object, so multiple loops can iterate independently.\n\n---\n\n## The `List` Interface\n\nA `List`:\n\n- Represents an **ordered sequence**.\n- Supports index-based access.\n- Allows duplicates.\n\n### Example\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Lists {\n    public static void show() {\n        List<String> names = new ArrayList<>();\n        names.add(\"Alice\");\n        names.add(\"Bob\");\n\n        List<Integer> ints = List.of(1, 2, 3, 4); // immutable list\n        System.out.println(ints);                 // [1, 2, 3, 4]\n        System.out.println(names);                // [Alice, Bob]\n        System.out.println(ints.subList(0, 2));   // [1, 2]\n    }\n}\n```\n\n---\n\n## Sorting: `Comparable` and `Comparator`\n\nSorting requires either:\n\n- `Comparable<T>` → defines a **natural order**.\n- `Comparator<T>` → provides a **custom order**.\n\n### Example\n\n```java\nimport java.util.*;\n\npublic class Sorting {\n    public static void main(String[] args) {\n        var cus = new ArrayList<Customer>();\n        cus.add(new Customer(\"Amr\", 100));\n        cus.add(new Customer(\"zzz\", 11));\n        cus.add(new Customer(\"huda\", 90));\n        cus.add(new Customer(\"salwa\", 1000));\n\n        Collections.sort(cus); // natural order: by name\n        cus.sort(new CustomerComparator()); // custom: by invoice\n        System.out.println(cus);\n    }\n\n    static class Customer implements Comparable<Customer> {\n        String name;\n        private int invoice;\n\n        Customer(String name, int in) {\n            this.name = name;\n            this.invoice = in;\n        }\n\n        @Override\n        public int compareTo(Customer c) {\n            return this.name.compareTo(c.name); // alphabetical\n        }\n\n        public int getInvoice() {\n            return invoice;\n        }\n\n        @Override\n        public String toString() {\n            return name + \" (\" + invoice + \")\";\n        }\n    }\n\n    static class CustomerComparator implements Comparator<Customer> {\n        @Override\n        public int compare(Customer o1, Customer o2) {\n            return o2.getInvoice() - o1.getInvoice(); // descending invoices\n        }\n    }\n}\n```\n\n---\n\n## The `Queue` Interface\n\nA `Queue`:\n\n- Models jobs to be processed in order.\n- Methods:\n  - `add()` / `offer()`\n  - `remove()` / `poll()`\n  - `peek()`\n\n### Example\n\n```java\nimport java.util.ArrayDeque;\nimport java.util.Queue;\n\npublic class QueueInterface {\n    public static void main(String[] args) {\n        Queue<String> ppl = new ArrayDeque<>();\n\n        ppl.add(\"amr\");\n        ppl.add(\"ola\");\n        ppl.add(\"soliman\");\n\n        System.out.println(ppl.peek());   // look at front\n        System.out.println(ppl.remove()); // remove front\n        System.out.println(ppl.poll());   // remove or return null if empty\n    }\n}\n```\n\n---\n\n## 7. The `Set` Interface\n\nA `Set`:\n\n- Stores **unique values**.\n- No duplicates.\n- Useful for unions, intersections, and difference.\n\n### Example\n\n```java\nimport java.util.*;\n\npublic class SetDemo {\n    public static void main(String[] args) {\n        Set<Integer> ids = new HashSet<>(List.of(1, 2, 3, 4, 5, 5, 2));\n        Set<Integer> ids2 = new HashSet<>(List.of(3, 4, 7, 8, 9));\n\n        ids.retainAll(ids2); // intersection\n        System.out.println(ids); // [3, 4]\n    }\n}\n```\n\n---\n\n## 8. The `Map` Interface\n\nA `Map<K, V>`:\n\n- Stores key-value pairs.\n- Keys are unique, values can repeat.\n- Fast lookups.\n\n### Example\n\n```java\nimport java.util.*;\n\npublic class HashTables {\n    public static void main(String[] args) {\n        Map<Integer, String> users = new HashMap<>();\n        users.put(1, \"amr\");\n        users.put(2, \"ola\");\n        users.put(3, \"rawia\");\n\n        System.out.println(users.get(1)); // lookup by key\n        users.replace(1, \"Aaaa\");\n        System.out.println(users);\n\n        for (var entry : users.entrySet())\n            System.out.println(entry.getKey() + \" -> \" + entry.getValue());\n    }\n}\n```\n\n---\n\n## 9. Recap\n\n- **Collection**: root interface (add/remove/contains).\n- **List**: ordered, indexable, duplicates allowed.\n- **Set**: unique values.\n- **Queue**: process elements in order.\n- **Map**: key-value pairs (not a Collection but part of JCF).\n- Sorting:\n  - `Comparable`: natural order.\n  - `Comparator`: custom order.\n\n---\n","slug":"Advanced java","title":"Advanced Java","section":"A Quick Refresher","icon":"rotate","filePath":"/home/runner/work/complete-intro-to-spring-and-springBoot/complete-intro-to-spring-and-springBoot/lessons/00-A quick Refresher/D-Advanced java.md","nextSlug":"/complete-intro-to-spring-and-springBoot/lessons/A quick Refresher/Functional programming","prevSlug":"/complete-intro-to-spring-and-springBoot/lessons/A quick Refresher/Oop"}},"__N_SSG":true}