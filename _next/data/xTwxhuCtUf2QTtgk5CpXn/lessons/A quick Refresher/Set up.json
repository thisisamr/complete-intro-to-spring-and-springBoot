{"pageProps":{"post":{"attributes":{},"html":"<h1><strong>Introduction to Java Programming ðŸš€</strong></h1>\n<p>Welcome to the world of Java!\nIn this lesson, youâ€™ll set up your development environment, learn the basic structure of a Java program, and write your very first <strong>&quot;Hello, World!&quot;</strong> application.\nWeâ€™ll also explore how Java code runs behind the scenes and share a few fun facts about the language.\nThis course will be using <strong>Java 24</strong>.</p>\n<hr>\n<h2>1. Setting Up Your Development Environment</h2>\n<p>To write and run Java code, you need two main components:</p>\n<ol>\n<li><strong>Java Development Kit (JDK)</strong> â€“ contains the compiler, Java Virtual Machine (JVM), and essential tools.</li>\n<li><strong>Integrated Development Environment (IDE)</strong> â€“ software that makes coding easier with features like autocomplete, debugging, and project management.</li>\n</ol>\n<hr>\n<h3><strong>A. Installing the JDK</strong></h3>\n<ol>\n<li><p>Download a <strong>Java 24-compatible JDK</strong> from:\n<a href=\"https://openjdk.org/\">OpenJdk</a> for OpenJDK.</p>\n</li>\n<li><p>Choose the correct installer for your operating system (Windows, macOS, Linux).\n3.Follow the setup instructions.</p>\n</li>\n</ol>\n<hr>\n<h3><strong>B. Installing IntelliJ IDEA</strong></h3>\n<p>Weâ€™ll use <strong>IntelliJ IDEA Community Edition</strong> (free) for this course.</p>\n<ol>\n<li>Download from the <a href=\"https://www.jetbrains.com/idea/download/\">JetBrains website</a>.</li>\n<li>Install it using the provided installer.</li>\n<li>On first launch, configure IntelliJ to use the JDK you installed.</li>\n</ol>\n<hr>\n<h2>2. Anatomy of a Java Program</h2>\n<p>A simple Java program has a specific structure. Hereâ€™s an example:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Hello, World!&quot;</span>);\n    }\n}\n</code></pre><h3><strong>Breaking it down:</strong></h3>\n<ul>\n<li><p><strong><code>public class HelloWorld</code></strong>\nDeclares a class named <code>HelloWorld</code>.</p>\n<ul>\n<li>In Java, all code lives inside a class.</li>\n<li>The file name <strong>must</strong> match the class name (e.g., <code>HelloWorld.java</code>).</li>\n<li><code>public</code> means the class is accessible from anywhere.</li>\n</ul>\n</li>\n<li><p><strong><code>public static void main(String[] args)</code></strong>\nThe <strong>entry point</strong> of a Java program.</p>\n<ul>\n<li><code>public</code> â†’ accessible from anywhere.</li>\n<li><code>static</code> â†’ belongs to the class, not an instance which allows the method to be called without creating an object of the class (the JVM needs to call it directly).</li>\n<li><code>void</code> â†’ doesnâ€™t return a value.</li>\n<li><code>main</code> â†’ special method name that JVM looks for.</li>\n<li><code>(String[] args)</code> â†’ accepts command-line arguments as an array of strings.</li>\n</ul>\n</li>\n<li><p><strong><code>System.out.println(&quot;Hello, World!&quot;);</code></strong>\nPrints text to the console.</p>\n</li>\n</ul>\n<hr>\n<h2>3. Writing Your First Program</h2>\n<ol>\n<li>Open IntelliJ IDEA and create a <strong>new project</strong>.</li>\n<li>Create a new Java class named <code>HelloWorld</code>.</li>\n<li>Type in the following code:</li>\n</ol>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Hello, World!&quot;</span>);\n    }\n}\n</code></pre><ol start=\"4\">\n<li>Click the green <strong>Run</strong> button next to <code>main</code>.\nYou should see:</li>\n</ol>\n<pre><code>Hello, World!\n</code></pre><p>ðŸŽ‰ Congratulations â€” youâ€™ve just written your first Java program!</p>\n<hr>\n<h2>4. How Java Code Runs</h2>\n<p>Java is <strong>both compiled and interpreted</strong>:</p>\n<ol>\n<li><p><strong>Compilation</strong></p>\n<ul>\n<li>The Java compiler (<code>javac</code>) translates <code>.java</code> source files into <strong>bytecode</strong> (<code>.class</code> files).</li>\n<li>Bytecode is platform-independent.</li>\n</ul>\n</li>\n<li><p><strong>Execution</strong></p>\n<ul>\n<li>The JVM reads the bytecode and translates it into machine code for your operating system (using an interpreter or Just-In-Time compiler).</li>\n<li>This is why Java follows the <strong>&quot;Write Once, Run Anywhere&quot;</strong> principle.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>5. Fun Facts About Java</h2>\n<ul>\n<li><strong>Creator:</strong> James Gosling at Sun Microsystems, mid-1990s.</li>\n<li><strong>Original Name:</strong> <em>Oak</em> (after a tree outside Goslingâ€™s office).</li>\n<li><strong>Why &quot;Java&quot;?</strong> Named after Java coffee from Indonesia.</li>\n<li><strong>Platform-Independent:</strong> Runs on Windows, macOS, Linux, and more â€” no code changes needed.</li>\n<li><strong>Everywhere:</strong> Powers Android apps, enterprise systems, big data tools, and even embedded devices.</li>\n</ul>\n<hr>\n<h2>6. Course Structure</h2>\n<p>This course will take you from <strong>beginner</strong> to <strong>intermediate</strong> Java developer in three parts:</p>\n<h3>Part 1: Fundamentals</h3>\n<ul>\n<li>The Java Type System</li>\n<li>Building a Small Project</li>\n<li>Control Flow (Conditionals &amp; Loops)</li>\n<li>Clean Coding Techniques</li>\n<li>Debugging</li>\n<li>Packaging Your Code</li>\n</ul>\n<h3>Part 2: Object-Oriented Programming (OOP)</h3>\n<ul>\n<li>Classes &amp; Objects</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n<li>Abstraction</li>\n<li>Encapsulation</li>\n</ul>\n<h3>Part 3: Advanced Concepts</h3>\n<ul>\n<li>Functional Programming in Java</li>\n<li>Multithreading</li>\n<li>ExecutorService</li>\n</ul>\n<h3>Part 4: Async java</h3>\n<ul>\n<li>CompletableFuture</li>\n</ul>\n<p>âœ… By the end of this course, youâ€™ll be confident in writing Java programs, understanding how they work, and applying best practices.</p>\n","markdown":"# **Introduction to Java Programming ðŸš€**\n\nWelcome to the world of Java!\nIn this lesson, youâ€™ll set up your development environment, learn the basic structure of a Java program, and write your very first **\"Hello, World!\"** application.\nWeâ€™ll also explore how Java code runs behind the scenes and share a few fun facts about the language.\nThis course will be using **Java 24**.\n\n---\n\n## 1. Setting Up Your Development Environment\n\nTo write and run Java code, you need two main components:\n\n1. **Java Development Kit (JDK)** â€“ contains the compiler, Java Virtual Machine (JVM), and essential tools.\n2. **Integrated Development Environment (IDE)** â€“ software that makes coding easier with features like autocomplete, debugging, and project management.\n\n---\n\n### **A. Installing the JDK**\n\n1. Download a **Java 24-compatible JDK** from:\n   [OpenJdk](https://openjdk.org/) for OpenJDK.\n\n2. Choose the correct installer for your operating system (Windows, macOS, Linux).\n   3.Follow the setup instructions.\n\n---\n\n### **B. Installing IntelliJ IDEA**\n\nWeâ€™ll use **IntelliJ IDEA Community Edition** (free) for this course.\n\n1. Download from the [JetBrains website](https://www.jetbrains.com/idea/download/).\n2. Install it using the provided installer.\n3. On first launch, configure IntelliJ to use the JDK you installed.\n\n---\n\n## 2. Anatomy of a Java Program\n\nA simple Java program has a specific structure. Hereâ€™s an example:\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n### **Breaking it down:**\n\n- **`public class HelloWorld`**\n  Declares a class named `HelloWorld`.\n  - In Java, all code lives inside a class.\n  - The file name **must** match the class name (e.g., `HelloWorld.java`).\n  - `public` means the class is accessible from anywhere.\n\n- **`public static void main(String[] args)`**\n  The **entry point** of a Java program.\n  - `public` â†’ accessible from anywhere.\n  - `static` â†’ belongs to the class, not an instance which allows the method to be called without creating an object of the class (the JVM needs to call it directly).\n  - `void` â†’ doesnâ€™t return a value.\n  - `main` â†’ special method name that JVM looks for.\n  - `(String[] args)` â†’ accepts command-line arguments as an array of strings.\n\n- **`System.out.println(\"Hello, World!\");`**\n  Prints text to the console.\n\n---\n\n## 3. Writing Your First Program\n\n1. Open IntelliJ IDEA and create a **new project**.\n2. Create a new Java class named `HelloWorld`.\n3. Type in the following code:\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n4. Click the green **Run** button next to `main`.\n   You should see:\n\n```\nHello, World!\n```\n\nðŸŽ‰ Congratulations â€” youâ€™ve just written your first Java program!\n\n---\n\n## 4. How Java Code Runs\n\nJava is **both compiled and interpreted**:\n\n1. **Compilation**\n   - The Java compiler (`javac`) translates `.java` source files into **bytecode** (`.class` files).\n   - Bytecode is platform-independent.\n\n2. **Execution**\n   - The JVM reads the bytecode and translates it into machine code for your operating system (using an interpreter or Just-In-Time compiler).\n   - This is why Java follows the **\"Write Once, Run Anywhere\"** principle.\n\n---\n\n## 5. Fun Facts About Java\n\n- **Creator:** James Gosling at Sun Microsystems, mid-1990s.\n- **Original Name:** _Oak_ (after a tree outside Goslingâ€™s office).\n- **Why \"Java\"?** Named after Java coffee from Indonesia.\n- **Platform-Independent:** Runs on Windows, macOS, Linux, and more â€” no code changes needed.\n- **Everywhere:** Powers Android apps, enterprise systems, big data tools, and even embedded devices.\n\n---\n\n## 6. Course Structure\n\nThis course will take you from **beginner** to **intermediate** Java developer in three parts:\n\n### Part 1: Fundamentals\n\n- The Java Type System\n- Building a Small Project\n- Control Flow (Conditionals & Loops)\n- Clean Coding Techniques\n- Debugging\n- Packaging Your Code\n\n### Part 2: Object-Oriented Programming (OOP)\n\n- Classes & Objects\n- Inheritance\n- Polymorphism\n- Abstraction\n- Encapsulation\n\n### Part 3: Advanced Concepts\n\n- Functional Programming in Java\n- Multithreading\n- ExecutorService\n\n### Part 4: Async java\n\n- CompletableFuture\n\nâœ… By the end of this course, youâ€™ll be confident in writing Java programs, understanding how they work, and applying best practices.\n","slug":"Set up","title":"Set Up","section":"A Quick Refresher","icon":"rotate","filePath":"/home/runner/work/complete-intro-to-spring-and-springBoot/complete-intro-to-spring-and-springBoot/lessons/00-A quick Refresher/A-Set up.md","nextSlug":"/complete-intro-to-spring-and-springBoot/lessons/A quick Refresher/Java Fundamentals","prevSlug":null}},"__N_SSG":true}