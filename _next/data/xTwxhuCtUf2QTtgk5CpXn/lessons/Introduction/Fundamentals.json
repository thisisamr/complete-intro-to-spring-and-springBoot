{"pageProps":{"post":{"attributes":{},"html":"<h2>A-1: Variables in Java</h2>\n<p>Variables are containers for storing data. In Java, you must <strong>declare</strong> a variable with a type before using it.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> thisisamr.services;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Variables</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">// declare and initialize</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">age</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">23</span>;\n\n        <span class=\"hljs-comment\">// concatenation</span>\n        System.out.println(<span class=\"hljs-string\">&quot;This is the age: &quot;</span> + age);\n\n        <span class=\"hljs-comment\">// printf with format specifiers</span>\n        System.out.printf(<span class=\"hljs-string\">&quot;This is the age: %d%n&quot;</span>, age);\n\n        <span class=\"hljs-comment\">// multiple arguments</span>\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Amr&quot;</span>;\n        System.out.printf(<span class=\"hljs-string\">&quot;The name is %2$s and the age is %1$d%n&quot;</span>, age, name);\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li>Always initialize variables before use.</li>\n<li><code>%d</code> → integer, <code>%s</code> → string, <code>%f</code> → floating-point.</li>\n</ul>\n<hr>\n<h2>A-2: Primitive Types vs Reference Types</h2>\n<p>Java variables fall into <strong>two categories</strong>:</p>\n<ol>\n<li><strong>Primitive types</strong> (store raw values).</li>\n<li><strong>Reference types</strong> (store the <em>address</em> of an object in memory).</li>\n</ol>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrimitiveTypes</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">// Primitives</span>\n        <span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">small</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;        <span class=\"hljs-comment\">// 1 byte</span>\n        <span class=\"hljs-type\">short</span> <span class=\"hljs-variable\">shortNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">32000</span>;  <span class=\"hljs-comment\">// 2 bytes</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">views</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1000000</span>;     <span class=\"hljs-comment\">// 4 bytes</span>\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">bigNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10000000000L</span>; <span class=\"hljs-comment\">// 8 bytes</span>\n\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5.99f</span>;     <span class=\"hljs-comment\">// 4 bytes</span>\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">pi</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3.14159</span>;     <span class=\"hljs-comment\">// 8 bytes</span>\n\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">letter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>;       <span class=\"hljs-comment\">// 2 bytes (Unicode)</span>\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">isActive</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 1 byte</span>\n\n        <span class=\"hljs-comment\">// Reference type</span>\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Hello!&quot;</span>;\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li>Numbers with decimals are <code>double</code> by default → add <code>f</code> for <code>float</code>.</li>\n<li>Large integers require <code>L</code> suffix for <code>long</code>.</li>\n</ul>\n<hr>\n<h2>A-3: Strings</h2>\n<p>Strings are <strong>reference types</strong> and <strong>immutable</strong>. Reassigning creates a new object.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">package</span> thisisamr.services;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Strings</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">copy</span> <span class=\"hljs-operator\">=</span> message;\n\n        message = <span class=\"hljs-string\">&quot;New text&quot;</span>;\n\n        <span class=\"hljs-comment\">// Original copy remains unchanged</span>\n        System.out.println(copy); <span class=\"hljs-comment\">// &quot;Hello World!&quot;</span>\n\n        <span class=\"hljs-comment\">// Useful methods</span>\n        System.out.println(copy.startsWith(<span class=\"hljs-string\">&quot;Hello&quot;</span>)); <span class=\"hljs-comment\">// true</span>\n        System.out.println(copy.length());            <span class=\"hljs-comment\">// 12</span>\n        System.out.println(copy.indexOf(<span class=\"hljs-string\">&quot;W&quot;</span>));        <span class=\"hljs-comment\">// 6</span>\n        System.out.println(copy.replace(<span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;J&#x27;</span>));   <span class=\"hljs-comment\">// &quot;Jello World!&quot;</span>\n\n        <span class=\"hljs-comment\">// Trimming</span>\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">messy</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;   they said: \\&quot;hi\\&quot;   &quot;</span>;\n        System.out.println(messy.trim());\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li>Strings behave like objects with methods (<code>length</code>, <code>replace</code>, <code>trim</code>, etc.).</li>\n<li>Immutable: changing a string doesn’t modify the original.</li>\n</ul>\n<hr>\n<h2>A-4: Arrays</h2>\n<p>Arrays store multiple values of the same type.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArraysDemo</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">int</span>[] numbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">5</span>];  <span class=\"hljs-comment\">// fixed size</span>\n        <span class=\"hljs-type\">int</span>[] values = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\n\n        <span class=\"hljs-comment\">// 2D arrays</span>\n        <span class=\"hljs-type\">int</span>[][] matrix = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>}};\n        System.out.println(Arrays.deepToString(matrix));\n\n        <span class=\"hljs-comment\">// Printing arrays</span>\n        System.out.println(Arrays.toString(values));\n\n        <span class=\"hljs-comment\">// Handling errors</span>\n        <span class=\"hljs-keyword\">try</span> {\n            numbers[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-number\">100</span>; <span class=\"hljs-comment\">// out of bounds</span>\n        } <span class=\"hljs-keyword\">catch</span> (ArrayIndexOutOfBoundsException e) {\n            System.out.println(<span class=\"hljs-string\">&quot;Index out of range!&quot;</span>);\n        }\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li>Arrays have a <strong>fixed length</strong>.</li>\n<li>Use <code>Arrays.toString()</code> or <code>Arrays.deepToString()</code> for printing.</li>\n</ul>\n<hr>\n<h2>A-5: Constants &amp; <code>final</code></h2>\n<p>Use <code>final</code> to declare <strong>constants</strong> that cannot change.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Constants</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">PI</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3.14159</span>;\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MAX_USERS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n\n        System.out.println(<span class=\"hljs-string\">&quot;PI: &quot;</span> + PI);\n        <span class=\"hljs-comment\">// PI = 3; // ❌ error: cannot assign a value to final variable</span>\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li>By convention, constants are written in <strong>UPPERCASE_WITH_UNDERSCORES</strong>.</li>\n</ul>\n<hr>\n<h2>A-6: Arithmetic Expressions</h2>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Arithmetic</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span> + <span class=\"hljs-number\">3</span>;\n        System.out.println(result); <span class=\"hljs-comment\">// 13</span>\n\n        System.out.println((<span class=\"hljs-type\">double</span>) <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// casting for precision</span>\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;\n        System.out.println(++x); <span class=\"hljs-comment\">// pre-increment: 6</span>\n        System.out.println(x++); <span class=\"hljs-comment\">// post-increment: prints 6, then x=7</span>\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">remainder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">9</span> % <span class=\"hljs-number\">4</span>;\n        System.out.println(remainder); <span class=\"hljs-comment\">// 1</span>\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li><code>%</code> is the modulo operator (remainder).</li>\n<li>Prefix <code>++x</code> vs postfix <code>x++</code> matter in evaluation.</li>\n</ul>\n<hr>\n<h2>A-7: Casting</h2>\n<p>Java performs <strong>implicit</strong> and <strong>explicit</strong> type conversions.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.text.NumberFormat;\n<span class=\"hljs-keyword\">import</span> java.util.Currency;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Casting</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">// Implicit casting</span>\n        <span class=\"hljs-type\">short</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a + <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// short → int automatically</span>\n\n        <span class=\"hljs-comment\">// Explicit casting</span>\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">pi</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3.99</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">intPi</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) pi; <span class=\"hljs-comment\">// lose decimal</span>\n        System.out.println(intPi); <span class=\"hljs-comment\">// 3</span>\n\n        <span class=\"hljs-comment\">// char to number</span>\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">letter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n        System.out.println((<span class=\"hljs-type\">int</span>) letter); <span class=\"hljs-comment\">// 65</span>\n\n        <span class=\"hljs-comment\">// Formatting currency</span>\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">amount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">12345.67</span>;\n        <span class=\"hljs-type\">NumberFormat</span> <span class=\"hljs-variable\">formatter</span> <span class=\"hljs-operator\">=</span> NumberFormat.getCurrencyInstance();\n        formatter.setCurrency(Currency.getInstance(<span class=\"hljs-string\">&quot;USD&quot;</span>));\n        System.out.println(formatter.format(amount));\n    }\n}\n</code></pre><p>✅ <strong>Notes</strong></p>\n<ul>\n<li>Widening conversions happen automatically (<code>short → int → long</code>).</li>\n<li>Narrowing (e.g., <code>double → int</code>) must be <strong>explicit</strong>.</li>\n</ul>\n<hr>\n<h2>A-8: Exercise 🏋️ Mortgage Calculator</h2>\n<p>Design a <strong>mortgage calculator</strong> using variables, arithmetic, and casting.</p>\n<p><strong>Formula:</strong></p>\n<p>$$\nM = P \\times \\frac{r(1+r)^n}{(1+r)^n - 1}\n$$</p>\n<p>Where:</p>\n<ul>\n<li><code>M</code> = monthly payment</li>\n<li><code>P</code> = loan principal</li>\n<li><code>r</code> = monthly interest rate (annual rate ÷ 12 ÷ 100)</li>\n<li><code>n</code> = total number of payments (years × 12)</li>\n</ul>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MortgageCalculator</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n\n        System.out.print(<span class=\"hljs-string\">&quot;Principal: &quot;</span>);\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">principal</span> <span class=\"hljs-operator\">=</span> input.nextDouble();\n\n        System.out.print(<span class=\"hljs-string\">&quot;Annual Interest Rate (%): &quot;</span>);\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">annualRate</span> <span class=\"hljs-operator\">=</span> input.nextDouble();\n\n        System.out.print(<span class=\"hljs-string\">&quot;Years: &quot;</span>);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">years</span> <span class=\"hljs-operator\">=</span> input.nextInt();\n\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">monthlyRate</span> <span class=\"hljs-operator\">=</span> annualRate / <span class=\"hljs-number\">100</span> / <span class=\"hljs-number\">12</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> years * <span class=\"hljs-number\">12</span>;\n\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">mortgage</span> <span class=\"hljs-operator\">=</span> principal *\n                (monthlyRate * Math.pow(<span class=\"hljs-number\">1</span> + monthlyRate, n)) /\n                (Math.pow(<span class=\"hljs-number\">1</span> + monthlyRate, n) - <span class=\"hljs-number\">1</span>);\n\n        System.out.printf(<span class=\"hljs-string\">&quot;Monthly Payment: %.2f%n&quot;</span>, mortgage);\n    }\n}\n</code></pre><hr>\n","markdown":"## A-1: Variables in Java\n\nVariables are containers for storing data. In Java, you must **declare** a variable with a type before using it.\n\n```java\npackage thisisamr.services;\n\npublic class Variables {\n    public static void main(String[] args) {\n        // declare and initialize\n        int age = 23;\n\n        // concatenation\n        System.out.println(\"This is the age: \" + age);\n\n        // printf with format specifiers\n        System.out.printf(\"This is the age: %d%n\", age);\n\n        // multiple arguments\n        String name = \"Amr\";\n        System.out.printf(\"The name is %2$s and the age is %1$d%n\", age, name);\n    }\n}\n```\n\n✅ **Notes**\n\n- Always initialize variables before use.\n- `%d` → integer, `%s` → string, `%f` → floating-point.\n\n---\n\n## A-2: Primitive Types vs Reference Types\n\nJava variables fall into **two categories**:\n\n1. **Primitive types** (store raw values).\n2. **Reference types** (store the _address_ of an object in memory).\n\n```java\npublic class PrimitiveTypes {\n    public static void main(String[] args) {\n        // Primitives\n        byte small = 100;        // 1 byte\n        short shortNum = 32000;  // 2 bytes\n        int views = 1000000;     // 4 bytes\n        long bigNum = 10000000000L; // 8 bytes\n\n        float price = 5.99f;     // 4 bytes\n        double pi = 3.14159;     // 8 bytes\n\n        char letter = 'A';       // 2 bytes (Unicode)\n        boolean isActive = true; // 1 byte\n\n        // Reference type\n        String message = \"Hello!\";\n    }\n}\n```\n\n✅ **Notes**\n\n- Numbers with decimals are `double` by default → add `f` for `float`.\n- Large integers require `L` suffix for `long`.\n\n---\n\n## A-3: Strings\n\nStrings are **reference types** and **immutable**. Reassigning creates a new object.\n\n```java\npackage thisisamr.services;\n\npublic class Strings {\n    public static void main(String[] args) {\n        String message = \"Hello World!\";\n        String copy = message;\n\n        message = \"New text\";\n\n        // Original copy remains unchanged\n        System.out.println(copy); // \"Hello World!\"\n\n        // Useful methods\n        System.out.println(copy.startsWith(\"Hello\")); // true\n        System.out.println(copy.length());            // 12\n        System.out.println(copy.indexOf(\"W\"));        // 6\n        System.out.println(copy.replace('H', 'J'));   // \"Jello World!\"\n\n        // Trimming\n        String messy = \"   they said: \\\"hi\\\"   \";\n        System.out.println(messy.trim());\n    }\n}\n```\n\n✅ **Notes**\n\n- Strings behave like objects with methods (`length`, `replace`, `trim`, etc.).\n- Immutable: changing a string doesn’t modify the original.\n\n---\n\n## A-4: Arrays\n\nArrays store multiple values of the same type.\n\n```java\nimport java.util.Arrays;\n\npublic class ArraysDemo {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];  // fixed size\n        int[] values = {1, 2, 3, 4, 5};\n\n        // 2D arrays\n        int[][] matrix = {{1, 2}, {3, 4}};\n        System.out.println(Arrays.deepToString(matrix));\n\n        // Printing arrays\n        System.out.println(Arrays.toString(values));\n\n        // Handling errors\n        try {\n            numbers[10] = 100; // out of bounds\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Index out of range!\");\n        }\n    }\n}\n```\n\n✅ **Notes**\n\n- Arrays have a **fixed length**.\n- Use `Arrays.toString()` or `Arrays.deepToString()` for printing.\n\n---\n\n## A-5: Constants & `final`\n\nUse `final` to declare **constants** that cannot change.\n\n```java\npublic class Constants {\n    public static void main(String[] args) {\n        final double PI = 3.14159;\n        final int MAX_USERS = 100;\n\n        System.out.println(\"PI: \" + PI);\n        // PI = 3; // ❌ error: cannot assign a value to final variable\n    }\n}\n```\n\n✅ **Notes**\n\n- By convention, constants are written in **UPPERCASE_WITH_UNDERSCORES**.\n\n---\n\n## A-6: Arithmetic Expressions\n\n```java\npublic class Arithmetic {\n    public static void main(String[] args) {\n        int result = 10 + 3;\n        System.out.println(result); // 13\n\n        System.out.println((double) 2 / 3); // casting for precision\n\n        int x = 5;\n        System.out.println(++x); // pre-increment: 6\n        System.out.println(x++); // post-increment: prints 6, then x=7\n\n        int remainder = 9 % 4;\n        System.out.println(remainder); // 1\n    }\n}\n```\n\n✅ **Notes**\n\n- `%` is the modulo operator (remainder).\n- Prefix `++x` vs postfix `x++` matter in evaluation.\n\n---\n\n## A-7: Casting\n\nJava performs **implicit** and **explicit** type conversions.\n\n```java\nimport java.text.NumberFormat;\nimport java.util.Currency;\n\npublic class Casting {\n    public static void main(String[] args) {\n        // Implicit casting\n        short a = 1;\n        int b = a + 2; // short → int automatically\n\n        // Explicit casting\n        double pi = 3.99;\n        int intPi = (int) pi; // lose decimal\n        System.out.println(intPi); // 3\n\n        // char to number\n        char letter = 'A';\n        System.out.println((int) letter); // 65\n\n        // Formatting currency\n        double amount = 12345.67;\n        NumberFormat formatter = NumberFormat.getCurrencyInstance();\n        formatter.setCurrency(Currency.getInstance(\"USD\"));\n        System.out.println(formatter.format(amount));\n    }\n}\n```\n\n✅ **Notes**\n\n- Widening conversions happen automatically (`short → int → long`).\n- Narrowing (e.g., `double → int`) must be **explicit**.\n\n---\n\n## A-8: Exercise 🏋️ Mortgage Calculator\n\nDesign a **mortgage calculator** using variables, arithmetic, and casting.\n\n**Formula:**\n\n$$\nM = P \\times \\frac{r(1+r)^n}{(1+r)^n - 1}\n$$\n\nWhere:\n\n- `M` = monthly payment\n- `P` = loan principal\n- `r` = monthly interest rate (annual rate ÷ 12 ÷ 100)\n- `n` = total number of payments (years × 12)\n\n```java\nimport java.util.Scanner;\n\npublic class MortgageCalculator {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Principal: \");\n        double principal = input.nextDouble();\n\n        System.out.print(\"Annual Interest Rate (%): \");\n        double annualRate = input.nextDouble();\n\n        System.out.print(\"Years: \");\n        int years = input.nextInt();\n\n        double monthlyRate = annualRate / 100 / 12;\n        int n = years * 12;\n\n        double mortgage = principal *\n                (monthlyRate * Math.pow(1 + monthlyRate, n)) /\n                (Math.pow(1 + monthlyRate, n) - 1);\n\n        System.out.printf(\"Monthly Payment: %.2f%n\", mortgage);\n    }\n}\n```\n\n---\n","slug":"Fundamentals","title":"Fundamentals","section":"Introduction","icon":"dumpster-fire","filePath":"/home/runner/work/complete-intro-to-spring-and-springBoot/complete-intro-to-spring-and-springBoot/lessons/01-Introduction/B-Fundamentals.md","nextSlug":null,"prevSlug":"/complete-intro-to-spring-and-springBoot/lessons/Introduction/intro"}},"__N_SSG":true}